taskKey="com.codegym.task.task26.task2613.big03"\n\nCashMachine (part 3)


1. Create CurrencyManipulator class that stores all the information about the selected currency.
The class must have:
1.1 String currencyCode &mdash; currency code, i.e. USD. It consists of three letters.
1.2 Map&lt;Integer, Integer&gt; denominations is a map of (denomination, quantity) pairs.
To see which currency is associated with the manipulator, add a getter for currencyCode.
Obviously, the manipulator can&#39;t function without the currency&#39;s name,
so add a constructor with this parameter and initialize currencyCode.

2. There may be several currencies, so we need a factory to create and store the manipulators.
Create a CurrencyManipulatorFactory class with the static getManipulatorByCurrencyCode(String currencyCode) method.
In this method, we&#39;ll create the relevant manipulator if it doesn&#39;t already exist, or return a previously created one.
Ignore case when searching for a currency manipulator.
Where do you think the best place to store all the manipulators would be?  Here&#39;s a little hint: the field should be called map.

Make it impossible to create CurrencyManipulatorFactory objects.


Требования:
1.	The CurrencyManipulator class must be in a separate file.
2.	The CurrencyManipulator class must have a String currencyCode field.
3.	The CurrencyManipulator class must have a private Map&lt;Integer, Integer&gt; denominations field.
4.	The CurrencyManipulator class must have a getter for the currencyCode field.
5.	The CurrencyManipulator class must have a constructor with one parameter that initializes the currencyCode field.
6.	The CurrencyManipulatorFactory class must be in a separate file.
7.	The CurrencyManipulatorFactory class must have a private default constructor.
8.	The CurrencyManipulatorFactory class must have a private static Map&lt;String, CurrencyManipulator&gt; map field.
9.	The CurrencyManipulatorFactory class must have a static getManipulatorByCurrencyCode(String currencyCode) method.


CashMachine (part 3)


1. Create two static methods in ConsoleHelper:
1.1 writeMessage(String message), which will write our message to the console.
1.2 String readString(), which will read a string from the console and return it.
If some exception occurs when working with the console, then we&#39;ll catch it and won&#39;t process the input.
By the way, create only one instance of BufferedReader, and save it in the static bis field.

2. Create an exception package, where we will put two checked exceptions:
2.1 We&#39;ll throw an InterruptedOperationException will be thrown when you need to interrupt the current operation and sign out of the application.
2.2 InsufficientFundsException will throw when we can not issue the requested amount.



CashMachine (part 3)


Let&#39;s write an ATM emulator.
We will support the following operations:
deposit money, withdraw money, and show the status of the ATM.
We will also support multiple currencies.
The ATM will operate using the banknotes we put into it.
If there are insufficient banknotes to make a withdrawal, then we will inform the user.
Obviously, everything should be user friendly, so you&#39;ll have to arrange things just right.

Let&#39;s begin:
1. Create a CashMachine class with the main method.
2. We&#39;ll specify the supported operations in an Operation enum: INFO, DEPOSIT, WITHDRAW.
Since everything needs to be user friendly, we&#39;ll say goodbye to the user when the application closes.
Therefore, we&#39;ll add another operation: EXIT.
3. We&#39;ll be actively communicating with with the user, so there will be a lot of text output.
To concentrate the code for working with the console in one place, create a ConsoleHelper class.



