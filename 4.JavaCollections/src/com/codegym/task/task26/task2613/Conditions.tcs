taskKey="com.codegym.task.task26.task2613.big02"\n\nCashMachine (part 2)


1. Create two static methods in ConsoleHelper:
1.1 writeMessage(String message), which will write our message to the console.
1.2 String readString(), which will read a string from the console and return it.
If some exception occurs when working with the console, then we&#39;ll catch it and won&#39;t process the input.
By the way, create only one instance of BufferedReader, and save it in the static bis field.

2. Create an exception package, where we will put two checked exceptions:
2.1 We&#39;ll throw an InterruptedOperationException will be thrown when you need to interrupt the current operation and sign out of the application.
2.2 InsufficientFundsException will throw when we can not issue the requested amount.


Требования:
1.	The InterruptedOperationException class must be in a separate file and must be abstract.
2.	The InsufficientFundsException class must be in a separate file and must be abstract.
3.	The ConsoleHelper class should have a private static BufferedReader bis field, which must be initialized immediately.
4.	The ConsoleHelper class must have a public static writeMessage(String message) method that displays the passed parameter on the console.
5.	The ConsoleHelper class must have a public static readString() method that reads a string from the console and returns it.


CashMachine (part 2)


Let&#39;s write an ATM emulator.
We will support the following operations:
deposit money, withdraw money, and show the status of the ATM.
We will also support multiple currencies.
The ATM will operate using the banknotes we put into it.
If there are insufficient banknotes to make a withdrawal, then we will inform the user.
Obviously, everything should be user friendly, so you&#39;ll have to arrange things just right.

Let&#39;s begin:
1. Create a CashMachine class with the main method.
2. We&#39;ll specify the supported operations in an Operation enum: INFO, DEPOSIT, WITHDRAW.
Since everything needs to be user friendly, we&#39;ll say goodbye to the user when the application closes.
Therefore, we&#39;ll add another operation: EXIT.
3. We&#39;ll be actively communicating with with the user, so there will be a lot of text output.
To concentrate the code for working with the console in one place, create a ConsoleHelper class.



