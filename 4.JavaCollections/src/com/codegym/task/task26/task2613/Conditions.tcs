taskKey="com.codegym.task.task26.task2613.big12"\n\nCashMachine (part 12)


In part 11, we hardcoded the credit card number and PIN code used to allow working with our ATM.
But we could have lots of users. We certainly won&#39;t hardcode them all! If we need to add another user,
we would have to redeploy our application. There is a solution to this problem.

Note that a new resources package has been added. We&#39;ll store our resource files in it.
This package has the verifiedCards.properties file, where card numbers and PIN codes are specified.

1. Add a private ResourceBundle validCreditCards field to LoginCommand.
In the declaration, initialize this field with the data from the verifiedCards.properties file.
Read online to find out how this is done for a ResourceBundle.
Important: build the path to verifiedCards.properties dynamically using the CashMachine class&#39;s getPackage() method
2. Replace the hardcoded credit card and PIN data with a check to see whether the entered user data is in verifiedCards.properties.


Требования:
1.	LoginCommand must have a private ResourceBundle validCreditCards field.
2.	The validCreditCards field must be initialized from the verifiedCards.properties file.
3.	Check credit cards and PIN codes using verifiedCards.properties.


CashMachine (part 12)


Congratulations! You implemented WithdrawCommand! The main functionality is finished. Next you can do some polishing and make things pretty.
Let&#39;s implement one sweet feature. We can get by without it, but it will make things more beautiful.
I&#39;m talking about verification of the user&#39;s credit card. No, there won&#39;t be any third-party API. Just processing of data from the console.

Let&#39;s call this the LOGIN operation and make a corresponding command.
1. Add the LOGIN operation with ordinal 0
2. Prevent the user from selecting this operation from the list.
In the only method for selecting operations, use the operation&#39;s ordinal to deny access &mdash; throw an IllegalArgumentException.
3. Create LoginCommand by analogy with the other commands. In this command, hardcode card number and PIN code
123456789012 and 1234, respectively.
4. Implement the following logic for LoginCommand:
4.1. Until the user enters a valid card number and PIN code, perform the following actions:
4.2. Request 2 numbers from the user: a 12-digit credit card number and a 4-digit PIN code.
4.3. Display a message if the user enters invalid data.
4.4. If the data is valid, then compare them with the hardcoded values (123456789012 and 1234).
4.5. If the user enters the data specified in item 4.4, then report that the verification was successful.
4.6. If the user does NOT enter the data specified in item 4.4, then return to item 4.1.
5. Fix CommandExecutor. Add the new operation to allKnownCommandsMap.
6. Fix the main method.
The LOGIN operation must be run once before any other operations are performed.
Don&#39;t forget about InterruptedOperationExceptions anywhere the user can stop working with the ATM. So, call the operation inside a try-catch block.



CashMachine (part 12)


Today we&#39;ll tackle WithdrawCommand. It&#39;s the most complex operation.

1. Implement the following algorithm for WithdrawCommand:
1.1. Read the currency code (the method already exists).
1.2. Get a manipulator for the specified currency.
1.3. Until the user enters valid data, do the following:
1.3.1. Ask the user to enter the amount.
1.3.2. If invalid data is entered, inform the user and return to item 1.3.
1.3.3. Check whether there&#39;s enough money in the account.
To do this, create a boolean isAmountAvailable(int expectedAmount) method in the manipulator. It should return true if there is enough money to make the withdrawal.
If there is not enough, then return to item 1.3.
1.3.4. Deduct the money from the account. To do this, in the manipulator class, create a
Map&lt;Integer, Integer&gt; withdrawAmount(int expectedAmount) that returns a Map&lt;denomination, quantity&gt;.
For details on the logic of this method, see item 2.
1.3.5. Display the result from item 1.3.4. in the following form:
&lt;tab&gt;&lt;denomination&gt; - &lt;quantity&gt;.
The lines should be sorted from larger denominations to smaller ones.
Display a message that the transaction was successful.
1.3.6. Catch InsufficientFundsExceptions, notify the user about the insufficient banknotes, and return to item 1.3.

2. Here&#39;s the logic for the withdrawAmount method:
2.1. Please note that the withdrawAmount method should return the smallest number of banknotes that can be used to provide the requested amount.
Use a greedy algorithm (google it).
If there are several options, then use the one that has the largest number of banknotes of the highest denomination.
If the result is three banknotes for a withdrawal amount of 600, i.e. 500 50 50 = 200 200 200, then issue banknotes according to the first option.
Suppose you need to issue 600.
The manipulator has the following banknotes:
500 - 2
200 - 3
100 - 1
50 - 12
The issued banknotes should be:
500 - 1
100 - 1
i.e. only two banknotes (this is the minimum number of banknotes) with the denominations 500 and 100.

2.2. We can&#39;t issue the same banknotes more than once, so
if we find a valid option for issuing the money (item 2.1 is successful), then remove all these notes from the map in the manipulator.

2.3. The withdrawAmount method should throw an InsufficientFundsException if it is impossible to issue the requested amount.
Suppose you need to issue 600.
The manipulator has the following banknotes:
500 - 2
200 - 2
The available banknotes cannot provide the requested amount. Throw an exception.
Don&#39;t forget that maps sometimes throw ConcurrentModificationExceptions.



CashMachine (part 12)


Today we&#39;re going to tackle ExitCommand.
1. Implement the following logic in ExitCommand:
1.1. Ask whether the user really wants to exit. Provide the following options: yes (y) or no (n).
1.2. If the user confirms, then say goodbye.
1.3. If the user does not confirm, then don&#39;t say goodbye &mdash; simply exit the program.

This is all good, but sometimes we need to urgently interrupt an operation, for example, if the user chose the wrong operation.
This is why we have InterruptedOperationException.
2. Implement the following logic:
2.1. If at any time the user enters &quot;EXIT&quot;, regardless of case, throw an InterruptedOperationException.
2.2. Find the only correct place to put this logic. Implement the functionality in this one method.

3. Wrap the body of the main method in a try-catch and handle InterruptedOperationExceptions.
Use ConsoleHelper to say goodbye to the user in the catch block.



CashMachine (part 12)


It&#39;s time to whip our main method into shape. It already has a bunch of stuff that shouldn&#39;t be there.

1. Move the logic from main to DepositCommand and InfoCommand.
So what&#39;s happened to main? We have a loop, in which we ask the user for an operation and then call a method on the CommandExecutor.
And so on forever... You need to come up the exit condition for the loop.
Correct the loop to make it a do-while. The exit condition is the EXIT operation.

2. Let&#39;s run the program and top up the account with &quot;EUR 100 2&quot; and &quot;USD 20 6&quot;. Then we&#39;ll look at INFO.
It&#39;s not clear what to do, since we&#39;ve created 2 manipulators: the first for EUR, the second for USD.
Let&#39;s improve the logic of InfoCommand. We need to display the balance for each manipulator.

2.1. In the CurrencyManipulatorFactory class, create a static getAllCurrencyManipulators() method that returns a Collection of all manipulators.
You stored all the manipulators in a map, right? If not, then refactor.
2.2. In InfoCommand, display &quot;&lt;currency code&gt; - &lt;total amount of money for the selected currency&gt;&quot;.
Let&#39;s run the program and top up the account with &quot;EUR 100 2&quot; and &quot;USD 20 6&quot;. Then we&#39;ll look at INFO.
Does everything work correctly?
EUR - 200
USD - 120
Excellent!

3. Run the program and immediately request the INFO operation as the first operation. Nothing is displayed? That&#39;s no good.
Add a boolean hasMoney() method to the manipulator. It should indicate whether any banknotes have been added.

4. In InfoCommand, use the method in item 3 and display &quot;No money available.&quot; if there is no money in the ATM.



CashMachine (part 12)


Let&#39;s return to the Command pattern.

1. Create a command package. It will contain all classes with relevant logic.
Think about the access modifier for each class in this package.

2. Create a Command interface with a void execute() method.

3. For each operation, create a command class that follows the Command pattern.
The names of these classes are DepositCommand, InfoCommand, WithdrawCommand, ExitCommand.

4. Create a public CommandExecutor class that we will use to interact with all the commands.
Create a static Map&lt;Operation, Command&gt; allKnownCommandsMap field in it. Initialize the map with all known operations and commands.

4.1 Create a public static final void execute(Operation operation) method that will call the execute method on the desired command.
Implement this logic.
4.2. Arrange access modifiers correctly, accounting for the fact that the only entry point is the execute method.

We&#39;ll check that your structure matches the tests on the server.
We&#39;ll carry the logic over to the next task.



