taskKey="com.codegym.task.task33.task3310.\n\nShortener (5)


Let&#39;s write our first repository (storage strategy). Internally, it will
have an ordinary HashMap. We&#39;ll keep all the strategies in the strategy package.
5.1. Create a HashMapStorageStrategy class that implements the StorageStrategy interface.
5.2. Add a HashMap&lt;Long, String&gt; data field to the class. It will store our data.
5.3. Implement all the methods the class needs. The methods&#39; implementations must
use the data field. Don&#39;t create additional fields.


Требования:
1.	The HashMapStorageStrategy class must support the StorageStrategy interface.
2.	A HashMap data field must be created and initialized in the HashMapStorageStrategy class.
3.	The HashMapStorageStrategy class must correctly implement the containsKey method.
4.	The HashMapStorageStrategy class must correctly implement the containsValue method.
5.	The HashMapStorageStrategy class must correctly implement the put method.
6.	The HashMapStorageStrategy class must correctly implement the getValue method.
7.	The HashMapStorageStrategy class must correctly implement the getKey method.


Shortener (5)


We&#39;ll need several helper classes:
4.1.	Create a Helper class.
4.1.1.	Add a static String generateRandomString() method, which
will generate a random string. Use the SecureRandom
and BigInteger classes to do this. Hint: search for &quot;random string Java&quot; on Google.
The string may consist of numbers and any of the 26 letters of the lowercase English alphabet.
4.1.2.	Add a static printMessage(String message) method to the class. It should display
the passed text on the console. All subsequent output in the program should
come through this method!
4.2.	Create an ExceptionHandler class.
4.2.1.	Add a static log(Exception e) method, which will display
a brief description of the exception.



Shortener (5)


Let&#39;s return to the Shortener class:
3.1.	Add a Long lastId field to it. Initialize it to zero. This field will
hold the identifier of the last string
added to the repository.
3.2.	Add a StorageStrategy storageStrategy field that will store the
data storage strategy.
3.3.	Add a constructor that accepts a StorageStrategy and initializes
the corresponding field.
3.4.	Implement the getId method. It should:
3.4.1.	Check whether the passed value is in the repository. If it is, then return
its key.
3.4.2.	If the passed value is not in the repository, then:
3.4.2.1.	Increase the value of lastId by one;
3.4.2.2.	Add a new key-value pair (new value of lastId, passed string) to the
repository;
3.4.2.3.	Return the new value of lastId.
3.5.	Implement the getString method. It should return the string for a given identifier
(key).
3.6.	Make sure you can call the getId and getString methods from different threads
by adding the appropriate modifier to the method headers.



Shortener (5)


Shortener will support various data storage strategies
(for strings and string identifiers). All these strategies will be inherited from the
StorageStrategy interface. Read more about the Strategy pattern on Wikipedia.
Our repository will rely on two concepts: key and value. The string identifier will be
the key, while the string itself will be the value.

2.1.	Add the StorageStrategy interface to the strategy package.
2.2.	Add the following methods to the interface:
2.2.1. boolean containsKey(Long key) - Returns true if the repository
contains the passed key.
2.2.2. boolean containsValue(String value) - Returns true if the repository
contains the passed value.
2.2.3. void put(Long key, String value) - Adds a new key-value pair to the
repository.
2.2.4.	Long getKey(String value) - Returns the key for the passed value.
2.2.5.	String getValue(Long key) - Return the value for the passed key.



Shortener (5)


Let&#39;s write a Shortener. It will be similar to
Google URL Shortener (https://goo.gl), but we&#39;ll extend its functionality and
make it console-based. It will shorten not only links, but also any string.
Our Shortener class will return a unique identifier
for any string, and vice versa &mdash; it will return a string based on a previously
obtained identifier.

Two additional requirements for Shortener:
- for two identical strings, the same identifier should be returned;
- it must support as many strings as there are unique long values:
the identifiers will be longs.
The first requirement greatly affects performance, because upon receiving
the identifier for a new string, we need to check whether we processed the
string previously in order to return the old identifier.

1.1.	Declare a Shortener class.
1.2.	Add stub methods to the declared class:
1.2.1.	Long getId(String string) &ndash; Returns the id for the specified
string.
1.2.2.	String getString(Long id) &ndash; Returns a string for the specified
id or null if an invalid id is passed.

1.3.    Create a Solution class with an empty main method.

P.S. Make all methods public and fields private if there are no explicit instructions regarding access modifiers.



