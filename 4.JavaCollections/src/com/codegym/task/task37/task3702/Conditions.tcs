taskKey="com.codegym.task.task37.task3702.\n\nFactories (part 2)


1. Create a public MaleFactory class in the male package with a public getPerson method that accepts one int age argument and
returns an appropriate object of a class implementing the Human interface.

2. Here&#39;s the logic of the getPerson method: use the MAX_AGE constant to determine which class corresponds to the passed age.
For example, age=4 corresponds to a boy (KidBoy), age=15 corresponds to a teenager (TeenBoy), and the other age corresponds to a man.

3. In the Solution class&#39;s main method, create a factory and call its getPerson method three times with the following arguments: 99, 4, 15.
Display the result on the console.
The output should be as follows:
Man{}
KidBoy{}
TeenBoy{}

Well done! The factory is complete! This is the Factory Method pattern.


Требования:
1.	The screen output must match the task conditions.
2.	In the Solution class&#39;s main method, the getPerson method must be called three times on the MaleFactory, using the arguments 99, 4, and 15.
3.	The getPerson method must return a Man object for any age over 19.
4.	The getPerson method must return a TeenBoy object for ages greater than 12, but less than 20.
5.	The getPerson method must return a KidBoy object for any age under 13.


Factories (part 2)


Hi!
Now you&#39;re going to dig into the Factory Method pattern. Let&#39;s take people as an example.
We&#39;ll determine what type of person someone is depending on his or her age.

In this task, we&#39;ll prepare the data that we&#39;ll use in the factory.

1. Create a shared Human interface for all types of people.

2. Let&#39;s make a factory for men. To do this, create a male package and create KidBoy, TeenBoy, and Man classes in it.
Implement the Human interface in each of these classes.

3. Create public MAX_AGE constants in the KidBoy and TeenBoy classes with the values 12 and 19, respectively.

4. Automatically generate toString methods for the KidBoy, TeenBoy, and Man classes. The result must be &quot;KidBoy{}&quot;, etc.

5. Create a Solution class with a main method.



