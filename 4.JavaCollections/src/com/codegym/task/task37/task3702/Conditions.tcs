taskKey="com.codegym.task.task37.task3702.\n\nFactories (part 3)


1. Create a female package and create KidGirl, TeenGirl, and Woman classes in it by analogy with the classes in the male package.

2. Create a FemaleFactory in the female package by analogy with MaleFactory and using the same principle for getting objects.

3.  Think about what these two factories have in common. What could you do to easily switch between them?
The answer is in the next task.


Требования:
1.	The KidGirl, TeenGirl, and Woman classes must be in the female package and support the Human interface.
2.	The toString method must be overridden in the KidGirl, TeenGirl, and Woman classes as outlined in the task conditions.
3.	The KidGirl class&#39;s MAX_AGE constant must be equal to 12.
4.	The TeenGirl class&#39;s MAX_AGE constant must be equal to 19.
5.	The getPerson method must return a Woman object for any age over 19.
6.	The getPerson method must return a TeenGirl object for ages greater than 12, but less than 20.
7.	The getPerson method must return a KidGirl object for any age under 13.


Factories (part 3)


1. Create a public MaleFactory class in the male package with a public getPerson method that accepts one int age argument and
returns an appropriate object of a class implementing the Human interface.

2. Here&#39;s the logic of the getPerson method: use the MAX_AGE constant to determine which class corresponds to the passed age.
For example, age=4 corresponds to a boy (KidBoy), age=15 corresponds to a teenager (TeenBoy), and the other age corresponds to a man.

3. In the Solution class&#39;s main method, create a factory and call its getPerson method three times with the following arguments: 99, 4, 15.
Display the result on the console.
The output should be as follows:
Man{}
KidBoy{}
TeenBoy{}

Well done! The factory is complete! This is the Factory Method pattern.



Factories (part 3)


Hi!
Now you&#39;re going to dig into the Factory Method pattern. Let&#39;s take people as an example.
We&#39;ll determine what type of person someone is depending on his or her age.

In this task, we&#39;ll prepare the data that we&#39;ll use in the factory.

1. Create a shared Human interface for all types of people.

2. Let&#39;s make a factory for men. To do this, create a male package and create KidBoy, TeenBoy, and Man classes in it.
Implement the Human interface in each of these classes.

3. Create public MAX_AGE constants in the KidBoy and TeenBoy classes with the values 12 and 19, respectively.

4. Automatically generate toString methods for the KidBoy, TeenBoy, and Man classes. The result must be &quot;KidBoy{}&quot;, etc.

5. Create a Solution class with a main method.



