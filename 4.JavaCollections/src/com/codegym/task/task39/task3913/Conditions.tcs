taskKey="com.codegym.task.task39.task3913.big02"\n\nLog parser (part 2)


Implement the UserQuery interface in the LogParser class:
2.1.	The getAllUsers() method must return all users.
2.2.	The getNumberOfUsers() method must return the number of unique users.
2.3.	The getNumberOfUserEvents() method must return the number of events from a specific user.
2.4.	The getUsersForIP() method must return the users with a specific IP address.
Multiple users can use the same IP address.
2.5.	The getUsersWhoHaveLoggedIn() method must return users who have logged in.
2.6.	The getUsersWhoHaveDownloadedPlugin() method must return users who have downloaded the plugin.
2.7.	The getUsersWhoHaveSentMessages() method must return users who have sent a message.
2.8.	The getUsersWhoHaveAttemptedTasks(Date after, Date before) method must return
users who have attempted any task.
2.9.	The getUsersWhoHaveAttemptedTasks(Date after, Date before, int task) method must return
users who have attempted the task with the specified task number.
2.10.	The getUsersWhoHaveCompletedTasks(Date after, Date before) method must return
users who have completed any task.
2.11.	The getUsersWhoHaveCompletedTasks(Date after, Date before, int task) must return
users who have completed the task with the specified task number.


Требования:
1.	The LogParser class must support the UserQuery interface.
2.	The getAllUsers() method must return a set containing all users.
3.	The getNumberOfUsers(Date, Date) method must return the number of unique users for the specified period.
4.	The getNumberOfUserEvents(String, Date, Date) method must return the number of events from the passed user for the specified period.
5.	The getUsersForIP(String, Date, Date) method must return a set containing users who worked from the passed IP address in the specified period.
6.	The getUsersWhoHaveLoggedIn(Date, Date) method must return a set containing users who logged in in the specified period.
7.	The getUsersWhoHaveDownloadedPlugin(Date, Date) method must return a set containing users who downloaded the plugin in the specified period.
8.	The getUsersWhoHaveSentMessages(Date, Date) method must return a set containing users who sent a message in the specified period.
9.	The getUsersWhoHaveAttemptedTasks(Date, Date) method must return a set containing users who attempted any task in the specified period.
10.	The getUsersWhoHaveAttemptedTasks(Date, Date, int task) method must return a set containing users who have attempted the task with the specified task number for the specified period.
11.	The getUsersWhoHaveCompletedTasks(Date, Date) method must return a set containing users who completed any task in the specified period.
12.	The getUsersWhoHaveCompletedTasks(Date, Date, int task) method must return a set containing users who have completed the task with the specified task number for the specified period.


Log parser (part 2)


Today we&#39;re going to write a log parser.
The log file has the following format:
ip username date event status
where:
ip is the IP address from which the user generated the event,
user is the username (one or more words separated by spaces),
date is the date of the event formatted as &lt;day.month.year hour:minute:second&gt;,
event is one of the following events:
LOGIN - a user logged in,
DOWNLOAD_PLUGIN - a user downloaded the plugin,
SEND_MESSAGE - a user sent a message,
ATTEMPT_TASK - a user attempted to complete a task,
COMPLETE_TASK - a user has completed a task.
The ATTEMPT_TASK and COMPLETE_TASK events have one additional parameter,
separated from the others by a space: the task number.
status is one of the following event statuses:
OK - the event succeeded,
FAILED - the event failed,
ERROR - an error occurred.

Example of a line from a log file:
&quot;146.34.15.5	Eduard Bentley	05.01.2021 20:22:55	COMPLETE_TASK 48	FAILED&quot;.
The log file entries are not necessarily ordered by date: events could
be logged in a different order than they occur.

The class that will be responsible for parsing logs is called LogParser.
1.1.	Add a LogParser class constructor with a Path logDir parameter that indicates
the directory with the logs. There may be several logs. All of them must have the LOG extension.
1.2.	Implement the IPQuery interface in the LogParser class:
1.2.1.	The getNumberOfUniqueIPs(Date after, Date before) method should return
the number of unique IP addresses for the specified period. Hereinafter,
if a method has Date after and Date before parameters, then you should only return
data related to this period (including the dates represented by the after and before parameters).
If the after parameter is null, then you need to process all entries whose
date is less than or equal to the before parameter.
If the before parameter is null, then you need to process all entries whose
date is greater than or equal to the after parameter.
If both after and before are null, then you need to process absolutely every entry
(without filtering by date).
1.2.2.	The getUniqueIPs() method must return a set of all
unique IP address. Store each IP address in a String.
1.2.3.	The getIPsForUser() method must return the IP addresses that the passed user
has worked from.
1.2.4.	The getIPsForEvent() method must return the IP addresses that produced
the passed event.
1.2.5.	The getIPsForStatus() method must return the IP addresses that generated events that
ended with the passed status.

You can change the implementation of the main() method as you see fit.



