taskKey="com.codegym.task.task39.task3913.big05"\n\nLog parser (part 5)


As you noticed, there are a huge number of combinations of parameter to choose from for selecting
specific records from a log file. Cover them all with appropriate methods.
It&#39;s thankless work.  So, we&#39;ll implement our own query language (QL).
Example query:
get ip for user = &quot;Jack&quot;
This query should return all the IP addresses from which user Jack did anything,
and we should see the result in our log.
Imagine how convenient it is to enter a query on the console and get the
information you need from a log.

5.1.	Implement the QLQuery interface in the LogParser class. The execute() method should only
support the following queries:
5.1.1.	get ip
5.1.2.	get user
5.1.3.	get date
5.1.4.	get event
5.1.5.	get status

Example: A call to execute(&quot;get ip&quot;) must return a Set&lt;String&gt; containing all
the unique IP addresses in the log (i.e. 127.0.0.1, 12.12.12.12, 146.34.15.5, 192.168.100.2
for the test file). The other queries should work in a similar manner.

The objects in the returned set must be Strings for ip and user queries,
Dates for date queries, Events for event queries, and Statuses for status queries.


Требования:
1.	The LogParser class must support the QLQuery interface.
2.	A call to the LogParser class&#39;s execute(&quot;get ip&quot;)  method must return a Set&lt;String&gt;containing all unique IP addresses.
3.	A call to the LogParser class&#39;s execute(&quot;get user&quot;) method must return a Set&lt;String&gt; containing all unique users.
4.	A call to the LogParser class&#39;s execute(&quot;get date&quot;) method must return a Set&lt;Date&gt; containing all unique dates.
5.	A call to the LogParser class&#39;s execute(&quot;get event&quot;) method must return a Set&lt;Event&gt; containing all unique events.
6.	A call to the LogParser class&#39;s execute(&quot;get status&quot;) method must return a Set&lt;Status&gt; containing all unique statuses.


Log parser (part 5)


Implement the EventQuery interface in the LogParser class:
4.1.	The getNumberOfEvents() method must return the number of events in the specified period.
4.2.	The getAllEvents() method must return all events in the specified period.
4.3.	The getEventsForIP() method must return the events generated by the specified IP.
4.4.	The getEventsForUser() method must return the events generated
by a specific user.
4.5.	The getFailedEvents() method must return the events that did not finish.
4.6.	The getErrorEvents() method must return the events that resulted in an error.
4.7.	The getNumberOfAttemptsToCompleteTask() method must return the number of attempts
to complete the specified task.
4.8.	The getNumberOfSuccessfulAttemptsToCompleteTask() method must return the number
of successful solutions to the specified task.
4.9.	The getAllAttemptedTasksAndNumberOfAttempts() method must return a (task_number,
number of attempts) map.
4.10.	The getAllCompletedTasksAndNumberOfCompletions() method must return a (task number,
number of completions) map.



Log parser (part 5)


Implement the DateQuery interface in the LogParser class:
3.1.	The getDatesForUserAndEvent() method must return the dates when a specific
user generated a specific event.
3.2.	The getDatesWhenSomethingFailed() method must return the dates when
any event failed (FAILED status).
3.3.	The getDatesWhenErrorOccurred() method must return the dates when
any event ended in an error (ERROR status).
3.4.	The getDateWhenUserLoggedInFirstTime() method must return the date when
the user logged in for the first time in the specified period. If there is no such date in the logs, return null.
3.5.	The getDateWhenUserAttemptedTask() method must return the date when the user
first attempted to completed the specified task. If there is no such date in the logs, return null.
3.6.	The getDateWhenUserCompletedTask() method must return the date when the user
first completed the specified task. If there is no such date in the logs, return null.
3.7.	The getDatesWhenUserSentMessages() method must return the dates when the
user sent a message.
3.8.	The getDatesWhenUserDownloadedPlugin() method must return the dates when the
user downloaded the plugin.



Log parser (part 5)


Implement the UserQuery interface in the LogParser class:
2.1.	The getAllUsers() method must return all users.
2.2.	The getNumberOfUsers() method must return the number of unique users.
2.3.	The getNumberOfUserEvents() method must return the number of events from a specific user.
2.4.	The getUsersForIP() method must return the users with a specific IP address.
Multiple users can use the same IP address.
2.5.	The getUsersWhoHaveLoggedIn() method must return users who have logged in.
2.6.	The getUsersWhoHaveDownloadedPlugin() method must return users who have downloaded the plugin.
2.7.	The getUsersWhoHaveSentMessages() method must return users who have sent a message.
2.8.	The getUsersWhoHaveAttemptedTasks(Date after, Date before) method must return
users who have attempted any task.
2.9.	The getUsersWhoHaveAttemptedTasks(Date after, Date before, int task) method must return
users who have attempted the task with the specified task number.
2.10.	The getUsersWhoHaveCompletedTasks(Date after, Date before) method must return
users who have completed any task.
2.11.	The getUsersWhoHaveCompletedTasks(Date after, Date before, int task) must return
users who have completed the task with the specified task number.



Log parser (part 5)


Today we&#39;re going to write a log parser.
The log file has the following format:
ip username date event status
where:
ip is the IP address from which the user generated the event,
user is the username (one or more words separated by spaces),
date is the date of the event formatted as &lt;day.month.year hour:minute:second&gt;,
event is one of the following events:
LOGIN - a user logged in,
DOWNLOAD_PLUGIN - a user downloaded the plugin,
SEND_MESSAGE - a user sent a message,
ATTEMPT_TASK - a user attempted to complete a task,
COMPLETE_TASK - a user has completed a task.
The ATTEMPT_TASK and COMPLETE_TASK events have one additional parameter,
separated from the others by a space: the task number.
status is one of the following event statuses:
OK - the event succeeded,
FAILED - the event failed,
ERROR - an error occurred.

Example of a line from a log file:
&quot;146.34.15.5	Eduard Bentley	05.01.2021 20:22:55	COMPLETE_TASK 48	FAILED&quot;.
The log file entries are not necessarily ordered by date: events could
be logged in a different order than they occur.

The class that will be responsible for parsing logs is called LogParser.
1.1.	Add a LogParser class constructor with a Path logDir parameter that indicates
the directory with the logs. There may be several logs. All of them must have the LOG extension.
1.2.	Implement the IPQuery interface in the LogParser class:
1.2.1.	The getNumberOfUniqueIPs(Date after, Date before) method should return
the number of unique IP addresses for the specified period. Hereinafter,
if a method has Date after and Date before parameters, then you should only return
data related to this period (including the dates represented by the after and before parameters).
If the after parameter is null, then you need to process all entries whose
date is less than or equal to the before parameter.
If the before parameter is null, then you need to process all entries whose
date is greater than or equal to the after parameter.
If both after and before are null, then you need to process absolutely every entry
(without filtering by date).
1.2.2.	The getUniqueIPs() method must return a set of all
unique IP address. Store each IP address in a String.
1.2.3.	The getIPsForUser() method must return the IP addresses that the passed user
has worked from.
1.2.4.	The getIPsForEvent() method must return the IP addresses that produced
the passed event.
1.2.5.	The getIPsForStatus() method must return the IP addresses that generated events that
ended with the passed status.

You can change the implementation of the main() method as you see fit.



