taskKey="com.codegym.task.task25.task2515.big14"\n\nSpace (part 14)


Now write the Ufo class.
It's a bit more complicated than the Bomb class and simpler than Spaceship.
You will need draw(), move(), and fire() methods.
Also, don't forget about the constructor. The parameters are doubles, and UFO's radius will be equal to 3.

We'll implement the draw() method by analogy with Spaceship. We'll use 'U' to draw UFOs.
Add a matrix by analogy with Spaceship.

You need to implement the move() method as follows:
a) the UFO moves randomly;
Hint:
double dx = Math.random() * 2 - 1;  // -1..1
double dy = Math.random() * 2 - 1;  // -1..1
b) the UFO does not move into the bottom half of the screen;
y <= height/2
c) the UFO has a 10% chance of shooting (calling the fire method).

The fire() method:
The UFO drops the bomb from its center.
Implement it by analogy with the Spaceship class.


Requirements:
1.	In the Ufo class, the constructor must take x and y coordinates, and always set the radius equal to 3.
2.	In the Ufo class, add a field with a matrix object by analogy with the Spaceship class.
3.	In the Ufo class, implement the draw() method, which should draw the object by analogy with the Spaceship class.
4.	In the Ufo class, implement the move() method, which changes the object&#39;s coordinates according to the task conditions.
5.	In the Ufo class, implement the fire() method, which creates a bomb under the center of the object and adds it to the Space.bombs list.
6.	In the Ufo class&#39;s move() method, call the fire() method with a probability of 10%.


Space (part 13)


We now turn to the draw and move methods.
In the move() method, you need to:
a) increase x by dx;
b) check to see whether the ship has moved beyond the boundaries of outer space [0, Space.game.getWidth()]. Use the checkBorders method.
Bear in mind that the ship's width is equal to twice its radius.

I'll implement the draw method myself: just declare an empty method.

We also need a fire() method, since our ship can shoot.
This method is called when we need to fire a shot.
In this method, you need to:
a) create two rockets;
b) set their coordinates equal to the left and right edges of the ship (the guns are located a distance of 2 from the center of the ship);
c) add these rockets to the list of rockets in the game object.

You can get it as follows:
Space.game.getRockets()



Space (part 12)


Now let's do the ship.
For complexity, we'll do this: if the user presses the left button, the ship will start moving to the left and continue to do so.
If the user presses the right button, it will start moving to the right and continue to do so until it hits the edge.
Accordingly, we'll create a special dx variable that will store the direction of the ship's movement.
if dx = 1, then the ship moves 1 to the right with each step,
if dx = -1, then the ship moves 1 to the left with each each step.
Here's what we need:
a) add a constructor as follows:
The ship's radius is equal to 3. The ship is large — it's no rocket or bomb.
public Spaceship(double x, double y)
{
super(x, y, 3);
}
b) add a double dx variable to the Spaceship class (the default value is 0);
c) the moveLeft() method, which sets dx equal to -1;
d) the moveRight() method, which sets dx equal to 1.



Space (part 11)


Now we'll write the Rocket class.
It's almost the same as the Bomb class.
But:
a) Rockets fly upward (i.e. y is decreased by 1);
b) We'll draw 'R' instead of 'B'.



Space (part 10)


Now we'll write the Bomb class. Everything is simple here.
Bomb inherits BaseObject.
Here's what we need:
a) change the constructor:
The Bomb constructor should look something like this:
public Bomb(double x, double y)
{
super(x, y, 1);
}
We use the super keyword to pass the x and y values passed to the Bomb constructor on to the BaseObject constructor,
where we also indicate a bomb radius equal to 1.

b) implement the move() method:
everything is simple here — the bomb drops downward, so just increase y by 1.

c) draw(Canvas canvas) method:
again, the logic is not very complicated here.
Let's just set the value at coordinates (x, y) to color "B":
canvas.setPoint(x, y, 'B').

d) Create a public static Space game in the Space class.



Space (part 9)


Canvas needs another two methods. Write them.
a) the clear() method();
This method will clear the matrix so it can be drawn on again.
For example, replace all characters in the matrix with spaces.

b) the print() method();
This method draws the matrix on the screen.
You should be able to figure this out on your own: Displaying a set of characters is not so difficult.
Don't forget to add a pair of blank lines at the end so that matrices displayed at different times do not run together.



