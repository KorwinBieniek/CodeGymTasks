taskKey="com.codegym.task.task25.task2515.big06"\n\nSpace (part 6)


But there's more.
The BaseObject class needs more methods.
For now, these will be empty draw() and move() methods.
Subclasses will have to override them and implement the necessary functionality.

Also add a die() method, which causes the object to die (isAlive = false)

We'll also need to determine whether the ship was hit by a bomb hit or a UFO was hit by a missile.
This is how we'll do that:
Create a special method: public boolean intersects(BaseObject o)
It will determine whether objects intersect. If they intersect, return true; if not, false.

Because we're treating objects as circles for convenience, I propose the following collision-detection algorithm:
if the center of the circle of one object lies within the circle of another, then we'll conclude that they've collided.
Or to put it more simply:
distance_between_objects < max(radius_of_the_first_object, radius_of_the_second_object).


Requirements:
1.	Create an empty draw() method in the BaseObject class.
2.	Create an empty move() method in the BaseObject class.
3.	In the BaseObject class, create a die() method that sets the isAlive field to false.
4.	In the BaseObject class, create an intersects(BaseObject o) method that returns a boolean.
5.	Implement the intersects(BaseObject o) method. If the objects collide, return true; otherwise, false.


Space (part 5)


Now let's move on to the BaseObject class.
I want to make some suggestions.

First, for simplicity, treat all of our objects in space as circles.
We'll draw them as shapes, just as before.
But when calculating object collisions, we'll assume they are round.
Doing it this way is much simpler.

Second. Let the objects' coordinates and radius be real numbers.
This will ensure smooth motion and accurate calculations.
And we'll round them when drawing.

Here's what we need:
a) Add to the BaseObject class the variables double x, double y, and double radius, as well as getters and setters for them.
b) Add a boolean isAlive variable (to indicate whether the object is alive).
c) Add a getter (an isAlive() method for the isAlive variable).
d) Add a BaseObject(double x, double y, double radius) constructor.
e) Be sure that isAlive is set to true in the constructor (stillborn objects are of no use to us).
f) You need to go through all the subclasses and fix their constructors.
If you use IntelliJ IDEA, Alt+Insert will help you.



Space (part 4)


What is Space class missing?
That's right! run() and draw() methods.
If you recall, the run method manages all the game logic.
And the draw method is responsible for drawing the next "frame".

We'll also benefit from a sleep(int ms) method.
Create them.



Space (part 3)


Why do we need the Space class?
To store all the objects and control how they interact.
What fields should it have?
width and height.
What else?
a) ship (our spaceship),
b) a list to store all the UFOs (List<Ufo>),
c) a list to store all the rockets (List<Rocket>),
d) a list to store all the bombs (List<Bomb>).

Task:
Add all these variables to the Space class.
Initialize the collections.
And don't forget to add getters for the variables, and also a setter for the ship field!

What should the constructor have?
Parameters for the width and height will suffice.



Space (part 2)


We will have bombs and rockets.
That means we need Bomb and Rocket classes.
Create them.

Our classes will have a lot in common.
They will move about in space and be drawn on the screen.
That means that they'll all have coordinates and a size.
And a move() method for moving and a draw() method for drawing them on the screen.

Here's an interesting suggestion: let's make one base class for all the objects.
Let this be the BaseObject class.
And the Ufo, Spaceship, Rocket, and Bomb classes will inherit it.
Create an abstract BaseObject class and add it as the parent of the Ufo, Spaceship, Rocket, and Bomb classes.

We also need a Canvas class.
It will be responsible for drawing the objects.
Objects will use it to draw themselves.
Or rather, they will draw themselves on it.
Create this class as well.



Space (part 1)


Let's write a new computer game.
We'll have a spaceship that will shoot rockets at UFOs.
For their part, the UFOs will lob bombs at the spaceship.
And, of course, all this is happening in outer space.

We're going to need the following classes: Space, Spaceship, and Ufo.
Create the following classes: Space, SpaceShip, Ufo.
Add a main method to the Space class.



