taskKey="com.codegym.task.task22.task2213.big11"\n\nTetris (part 11)


Now create a GamePieceFactory class.
We'll use it to create game pieces of various shapes.
For now, it will have only one static createRandomGamePiece() method:
static GamePiece createRandomGamePiece(int x, int y)


Requirements:
1.	The GamePieceFactory class must be in a separate file.
2.	A createRandomGamePiece() method with two int parameters must be created in the GamePieceFactory class.
3.	The createRandomGamePiece() method must be static.
4.	It should be possible to access the createRandomGamePiece() method from outside the GamePieceFactory class.
5.	The createRandomGamePiece() method must return a GamePiece.


Tetris (part 10)


We also need methods to control the game piece.

Add the following methods to the GamePiece class:
left() - For moving game pieces to the left.
right() - For moving game pieces to the right.
down() - For moving game pieces down.
up() - For moving game pieces up.
rotate() For rotating the game piece about the main diagonal.
downMaximum() - Drop the game piece to the bottom.
boolean isCurrentPositionAvailable() - Checks whether the game piece can be placed in the current position. For the test, hardcode the a return value of true. We won't implement the logic now.
land() - Called when the game piece reaches the bottom or lands on another game piece
All of its occupied cells should now be added to Field.



Tetris (part 9)


You may have noticed that we're writing the program "top down".
First, we decide what classes we need. Then we decide about the methods.
And then we start writing the code for the methods.
We're breaking a big task into many small ones.
When the code for all the methods is ready, we'll only need to check whether everything works as it should.
And if necessary — make some changes.



Tetris (part 8)


Now create the backbone of the GamePiece class.
This class will describe the falling game pieces.

We need to know the coordinates and shape.
The two variables x and y will be responsible for the coordinates.
The matrix is responsible for the shape. A two-dimensional 3x3 array consisting of ones and zeros.
A one means the cell is occupied — a zero means it is empty.

Add the following two fields to the GamePiece class: int x, int y.
And add a two-dimensional array: int[][] matrix.
In the same place, add getters for these variables.
Add a constructor with three parameters: x, y, and matrix.



Tetris (part 7)


We'll need 4 more methods in the Field class:
a) print() - The object draws its current state on the screen;
b) removeFullLines() - Completely full rows are removed from the matrix, and higher rows are moved down;
c) Integer getValue(int x, int y) - Returns the matrix value with coordinates (x, y);
d) void setValue(int x, int y, int value) - Sets to matrix value with coordinates (x, y) to the passed value.



Tetris (part 6)


Now let's move on to the Field class.
It will be responsible for storing information about which cells of the game field are currently occupied and which are empty.
Add the following two fields to the Field class: int width and int height.
We also need a matrix, i.e. a two-dimensional array: int[][] matrix;
In the same place, add getters for these variables.
Add a constructor that has two parameters: width and height. And don't forget about the matrix.

IMPORTANT!
A two-dimensional array can be represented as an array of arrays or as a rectangular matrix.
The first coordinate refers to the row, and the second refers to the column.
In other words, the cell with coordinates (x, y) is matrix[y][x].



