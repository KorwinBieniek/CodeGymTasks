taskKey="com.codegym.task.task22.task2213.big05"\n\nTetris (part 5)


Now you need to create the Tetris object itself.
Add a static Tetris field to the Tetris class.
The game field must NOT be private.

Then in the main() method, create a Tetris object and save it in this variable.
Then add a call to the run() method.


Requirements:
1.	The game field must be created in the Tetris class.
2.	The game field must NOT be private.
3.	The game field must be static.
4.	The game field must be a Tetris.
5.	The game field must be initialized with a new Tetris object in the main() method.
6.	The run() method must be called on the game field in the main() method.


Tetris (part 4)


We'll also need a couple of methods.
Add run() and step() methods to the Tetris class:

run() will be responsible for the entire game.
The step() method will be responsible for a single step in the game.

The return type is void for both methods.

From now on, if there are no explicit instructions about which access modifier to use, make methods public, and fields â€” private.

* In general, you should use the most restrictive access modifier you can.
* In other words, if the system's logic requires calls to a method from outside its class, then we can't make that method private.
* At the same time, there's no reason to make methods public if they will only be used within their package.
* This may seem insignificant at first, but it is actually one of the fundamental principles of OOP.
* Learn to do it correctly right from the start!



Tetris (part 3)


There's a field and a game piece, but how do we get them?

Add getters for the field and gamePiece fields.



Tetris (part 2)


Great!
Now add the following two fields to the Tetris class: Field field and GamePiece gamePiece.



Tetris (part 1)


Let's write Tetris!

Our Tetris game consists of two things: a game fields and game pieces that fall from above.
So to start, create three class: Field, GamePiece, and Tetris.

We will also need a method main() in the Tetris class.



