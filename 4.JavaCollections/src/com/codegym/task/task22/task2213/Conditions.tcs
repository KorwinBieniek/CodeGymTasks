taskKey="com.codegym.task.task22.task2213.big13"\n\nTetris (part 13)


Now we'll start to implement the methods we've created.
Implement the print() method in the Field class
a) The method should display a rectangle of '.' characters and 'X' characters.
b) The rectangle's height is equal to height, and its width is equal to width
c) If a cell is empty, display a period. If it is not empty, display the English letter 'X'.

Hint:
if (matrix[y][x]==0) ...


Requirements:
1.	The print() method should display the data on the screen.
2.	The print() method should display height rows.
3.	The number of characters in each row should be equal to width.
4.	If an array element is equal to 0, a period must be displayed on the screen, otherwise &mdash; the English letter &#39;X&#39;.


Tetris (part 12)


In Tetris, we control the movement of the game piece using the keyboard.

There are 4 actions:
move left (left arrow key),
move right (right arrow key),
rotate the game piece (number 5 on the numeric keypad),
drop the game piece (space).

We'll handle keyboard input in the Tetris class's run() method.

And now I have two pieces of news for you: good and bad.
The bad news is that Java doesn't let you read keys
until the user presses enter.
Not very convenient, right?

The good news is that I've written a special class (KeyboardObserver) that let's you get around this limitation.
So you can use it.

There's also some wonderful news.
You've done a great job so far, so I'll help you a little.
I've written the following methods for you:
a) createRandomGamePiece() in GamePieceFactory
b) run() in Tetris

Study them carefully and then proceed.



Tetris (part 11)


Now create a GamePieceFactory class.
We'll use it to create game pieces of various shapes.
For now, it will have only one static createRandomGamePiece() method:
static GamePiece createRandomGamePiece(int x, int y)



Tetris (part 10)


We also need methods to control the game piece.

Add the following methods to the GamePiece class:
left() - For moving game pieces to the left.
right() - For moving game pieces to the right.
down() - For moving game pieces down.
up() - For moving game pieces up.
rotate() For rotating the game piece about the main diagonal.
downMaximum() - Drop the game piece to the bottom.
boolean isCurrentPositionAvailable() - Checks whether the game piece can be placed in the current position. For the test, hardcode the a return value of true. We won't implement the logic now.
land() - Called when the game piece reaches the bottom or lands on another game piece
All of its occupied cells should now be added to Field.



Tetris (part 9)


You may have noticed that we're writing the program "top down".
First, we decide what classes we need. Then we decide about the methods.
And then we start writing the code for the methods.
We're breaking a big task into many small ones.
When the code for all the methods is ready, we'll only need to check whether everything works as it should.
And if necessary — make some changes.



Tetris (part 8)


Now create the backbone of the GamePiece class.
This class will describe the falling game pieces.

We need to know the coordinates and shape.
The two variables x and y will be responsible for the coordinates.
The matrix is responsible for the shape. A two-dimensional 3x3 array consisting of ones and zeros.
A one means the cell is occupied — a zero means it is empty.

Add the following two fields to the GamePiece class: int x, int y.
And add a two-dimensional array: int[][] matrix.
In the same place, add getters for these variables.
Add a constructor with three parameters: x, y, and matrix.



