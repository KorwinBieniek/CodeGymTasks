taskKey="com.codegym.task.task22.task2213.big07"\n\nTetris (part 7)


We'll need 4 more methods in the Field class:
a) print() - The object draws its current state on the screen;
b) removeFullLines() - Completely full rows are removed from the matrix, and higher rows are moved down;
c) Integer getValue(int x, int y) - Returns the matrix value with coordinates (x, y);
d) void setValue(int x, int y, int value) - Sets to matrix value with coordinates (x, y) to the passed value.


Requirements:
1.	A print() method with no parameters must be created in the Field class.
2.	A removeFullLines() method with no parameters must be created in the Field class.
3.	A getValue() method with two int parameters must be created in the Field class.
4.	A setValue() method with three int parameters must be created in the Field class.
5.	The print() method must not return a value.
6.	The removeFullLines() method must not return a value.
7.	The getValue() method should return an Integer.
8.	The setValue() method must not return a value.


Tetris (part 6)


Now let's move on to the Field class.
It will be responsible for storing information about which cells of the game field are currently occupied and which are empty.
Add the following two fields to the Field class: int width and int height.
We also need a matrix, i.e. a two-dimensional array: int[][] matrix;
In the same place, add getters for these variables.
Add a constructor that has two parameters: width and height. And don't forget about the matrix.

IMPORTANT!
A two-dimensional array can be represented as an array of arrays or as a rectangular matrix.
The first coordinate refers to the row, and the second refers to the column.
In other words, the cell with coordinates (x, y) is matrix[y][x].



Tetris (part 5)


Now you need to create the Tetris object itself.
Add a static Tetris field to the Tetris class.
The game field must NOT be private.

Then in the main() method, create a Tetris object and save it in this variable.
Then add a call to the run() method.



Tetris (part 4)


We'll also need a couple of methods.
Add run() and step() methods to the Tetris class:

run() will be responsible for the entire game.
The step() method will be responsible for a single step in the game.

The return type is void for both methods.

From now on, if there are no explicit instructions about which access modifier to use, make methods public, and fields â€” private.

* In general, you should use the most restrictive access modifier you can.
* In other words, if the system's logic requires calls to a method from outside its class, then we can't make that method private.
* At the same time, there's no reason to make methods public if they will only be used within their package.
* This may seem insignificant at first, but it is actually one of the fundamental principles of OOP.
* Learn to do it correctly right from the start!



Tetris (part 3)


There's a field and a game piece, but how do we get them?

Add getters for the field and gamePiece fields.



Tetris (part 2)


Great!
Now add the following two fields to the Tetris class: Field field and GamePiece gamePiece.



