taskKey="com.codegym.task.task28.task2810.big03"\n\nAggregator (part 3)


Starting in this task, you will begin writing the logic for fetching data from a website.
This logic will be contained entirely in the classes that implement Strategy.

Speaking in terms of the Strategy pattern, the provider acts as the context.
The provider must have a method that will call the strategy&#39;s method for performing the primary operation.
This method will return all of the Java job postings from the selected website.

1. In the root of the task, create a vo (value object) package and create a JobPosting class in it.
This class will store job posting data.

2. In Provider, create a List&lt;JobPosting&gt; getJavaJobPostings(String searchString) method. Leave the method empty for now.

3. What data is associated with a job posting?
A job title, city, company name, name of the website where the job posting was found, and a link to the job posting.
In the JobPosting class, create the corresponding String fields: title, city, companyName, websiteName, and url.

4. Create getters and setters for all of the JobPosting class&#39;s fields.

5. In the model package, create an LinkedinStrategy class that implements Strategy.
This class will implement a specific strategy for working with the Linkedin website (https://www.linkedin.com/jobs/).


Требования:
1.	In the root of the task, create a vo package and create a JobPosting class in it.
2.	In the Provider class, create an empty getJavaJobPostings(String searchString) method that will return a list of job postings.
3.	Create the following String fields in the JobPosting class: title, city, companyName, websiteName, and url.
4.	Create getters and setters for the JobPosting class&#39;s fields.
5.	In the model package, create an LinkedinStrategy class that implements the Strategy interface.


Aggregator (part 3)


1. Create a Controller class which will contain business logic.

2. Add a public constructor to Controller. It should accept as many providers as are passed to it.
Save them to a private providers field.
Do you remember how to do that? You need to press Alt+Enter on the constructor&#39;s parameter, and then select &quot;Create Field for Parameter &#39;providers&#39;&quot;.

3. If no providers are passed to the controller&#39;s constructor, then throw an IllegalArgumentException.

4. Create a toString method in the Controller class (Alt+Insert -&gt; toString()) with a standard implementation (it should display the providers field).

5. Create a provider in the main method. Then create the controller using this provider.

6. In the main method, display the Controller object on the console.



Aggregator (part 3)


It&#39;s time to work with information from the Internet a little. In this task, you&#39;ll be writing an aggregator for Java job posting.
What do we need?
There should be a list of websites we are searching for jobs.
First, we&#39;ll use https://www.linkedin.com/jobs/. We&#39;ll add other job search sites later.
These are the same site, just with different domains.

Where do we start our implementation? With the main method, of course! :)
1. Create an Aggregator class with a main method.

2. Create a model package, and create a Provider class inside it.
This class represents a generalization of how job posting data is retrieved.

3. Since the same script will be executed for each site, we&#39;ll use the Strategy pattern. Read about it online on Wikipedia.
Create a Strategy interface in the model package.
It will be responsible for fetching data from a website.

4. Add a Strategy strategy field to the Provider class. Add a constructor with this parameter and an appropriate setter.



