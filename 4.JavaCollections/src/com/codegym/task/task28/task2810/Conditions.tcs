taskKey="com.codegym.task.task28.task2810.big11"\n\nAggregator (part 11)


Model has a selectCity method to which the name of the city for the job search is passed.
Obviously, this method will be called by the controller, since it decides which model to use.

1. Add a new Model model field to the Controller.

2. Remove the scan() method from the Controller. Its logic has been moved to the model.

3. Remove the constructor, toString method, and providers field from the controller.

4. Create a Controller constructor with a Model parameter.
Throw an IllegalArgumentException for invalid data

5. Create a public void onCitySelected(String cityName) method in Controller, in which we will call the appropriate method on the model.

6. Remove the code from the main method. This code is no longer valid.


Требования:
1.	Add a new Model model field to the Controller class.
2.	Remove the scan method, toString method, constructor, and providers field from Controller.
3.	Add a new constructor with a Model parameter to Controller. Throw an IllegalArgumentException for invalid data.
4.	Create a public void onCitySelected(String cityName) method in Controller, in which we will call the appropriate method on the model.
5.	Remove the old code from the main method.


Aggregator (part 11)


View has an update method. The list of job postings is passed to it to be displayed.
Obviously, only the model will call this method, since only the model gets the data.
It&#39;s time to create the model.

1. Create a Model class in the model package.

2. Add two fields: 1) a view, 2) an array of providers.

3. Create a constructor with two parameters: 1) a view, 2) an array of providers.
Throw an IllegalArgumentException if invalid data is passed.

4. Create a public void selectCity(String city) method.

5. Implement the selectCity method:
5.1. get job postings from each provider,
5.2. update the view with the list of job postings from item 5.1.



Aggregator (part 11)


It&#39;s time to refactor the code a little.
Read about the Model-View-Controller (MVC) pattern on the Internet.
In short, the user uses the view to generate events that are processed by the controller.
The controller decides what data it needs, and accesses the correct model.
The model gets data, for example, from a database or a URL. Then the model passes the data to the view.
The view then displays the data.

1. Create a view package and create a View interface with two methods in it:
void update(List&lt;JobPosting&gt; jobPostings);
void setController(Controller controller);

2. In the view package, create an HtmlView class that implements View.

3. In the HtmlView class, create a controller field and use it to implement one of the interface&#39;s methods.



Aggregator (part 11)


Run the program in debug mode again.
Copy the value of document.html() into the HTML file we created earlier.
Format it and find the tags with job postings.

Read additional lesson material about attribute selectors in the Community.

PLEASE NOTE THIS SPECIAL RULE FOR TESTING THIS TASK!
The HTML code on the Linkedin page might change. To allow this task to work consistently without requiring us to change the tests,
use the cached version at http://codegym.cc/testdata/big28data.html
This is only for this item. Use real pages in subsequent tasks.

1. In the LinkedinStrategy class, create a protected Document getDocument(String searchString, int page) throws IOException method.

2. Implement the following logic in the LinkedinStrategy class&#39;s getJobPostings method:
2.1. Use the getDocument method to fetch the cached Linkedin page. The numbering starts with 0.
2.2. Get the list of elements with the &quot;jobs-search-result-item&quot; class. There should be up to 25 job postings per page.
2.3. If there is data in the list from step 2.2, then for each element:
2.3.1. create a JobPosting and set all its fields using data from the current element.
2.4. Repeat items 2.1-2.3 for the next Linkedin page.
2.5. When there are no more pages of job postings, exit the loop.

Ignore exceptions.
Add all job postings to a single list and return it.



Aggregator (part 11)


To let Linkedin know who&#39;s connecting to it, we&#39;ll add Request Headers to our request.

There are developer tools that show various information about requests.
I&#39;ll tell you about two tools.

***Chrome****
1. In the Chrome browser, go to Menu -&gt; Tools -&gt; Developer Tools, or press Ctrl+Shift+I
2. In the browser bar, enter the URL https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco
3. Go to the Network tab. The requested URL should be at the top.
It shows that the GET method was used to send the data (POST is also an option), and that the status is 200 (success)
4. Select it and you will see information about the page.
5. Find &quot;Request Headers&quot;

***Firefox***
1. Firefox has a Firebug plugin. Install Firebug (Menu -&gt; Add-ons -&gt; Search -&gt; Firebug -&gt; install).
2. Right-click to inspect an element using Firebug. Go to the Net tab and then the HTML submenu.
3. In the browser bar, enter the URL https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco
4. The HTML submenu has a list of requests, including the one you entered in the browser bar. Click on it and go to the &quot;Headers&quot; menu
5. Find &quot;Request Headers&quot;

Add a userAgent and referrer to the Linkedin connection.



Aggregator (part 11)


1. On the left in the Project panel, find &quot;External Libraries&quot; at the bottom. Find the examples package in jsoup, and look at the classes in this package.

2. Similar to the implementations in the jsoup examples, connect to the Linkedin URL using the GET method.
This needs to be done in the LinkedinStrategy class&#39;s getJobPostings method.
Hint: You&#39;ll get a Document object.

3. Set a breakpoint right after the connection. Run the program in debug mode.
Copy the value of document.html() into the clipboard.

4. Create a file with an html extension somewhere in the project&#39;s root.
Paste the contents of the clipboard into this file, and format it using Ctrl+Alt+L. IDEA knows how to format HTML.
Hooray! This is the page&#39;s HTML code :)

5. Implement equals/hashCode methods in the JobPosting class.
Press Alt+Enter for the equals() and hashCode() methods.



