taskKey="com.codegym.task.task28.task2810.big09"\n\nAggregator (part 9)


It&#39;s time to refactor the code a little.
Read about the Model-View-Controller (MVC) pattern on the Internet.
In short, the user uses the view to generate events that are processed by the controller.
The controller decides what data it needs, and accesses the correct model.
The model gets data, for example, from a database or a URL. Then the model passes the data to the view.
The view then displays the data.

1. Create a view package and create a View interface with two methods in it:
void update(List&lt;JobPosting&gt; jobPostings);
void setController(Controller controller);

2. In the view package, create an HtmlView class that implements View.

3. In the HtmlView class, create a controller field and use it to implement one of the interface&#39;s methods.


Требования:
1.	It the root of the task, create a new view package and create a View interface in it.
2.	The View interface must have two methods as per the task conditions.
3.	In the view package, create a new HtmlView class that implements View.
4.	In the HtmlView class, create a controller field and implement one of the interface&#39;s methods to initialize it.


Aggregator (part 9)


Run the program in debug mode again.
Copy the value of document.html() into the HTML file we created earlier.
Format it and find the tags with job postings.

Read additional lesson material about attribute selectors in the Community.

PLEASE NOTE THIS SPECIAL RULE FOR TESTING THIS TASK!
The HTML code on the Linkedin page might change. To allow this task to work consistently without requiring us to change the tests,
use the cached version at http://codegym.cc/testdata/big28data.html
This is only for this item. Use real pages in subsequent tasks.

1. In the LinkedinStrategy class, create a protected Document getDocument(String searchString, int page) throws IOException method.

2. Implement the following logic in the LinkedinStrategy class&#39;s getJobPostings method:
2.1. Use the getDocument method to fetch the cached Linkedin page. The numbering starts with 0.
2.2. Get the list of elements with the &quot;jobs-search-result-item&quot; class. There should be up to 25 job postings per page.
2.3. If there is data in the list from step 2.2, then for each element:
2.3.1. create a JobPosting and set all its fields using data from the current element.
2.4. Repeat items 2.1-2.3 for the next Linkedin page.
2.5. When there are no more pages of job postings, exit the loop.

Ignore exceptions.
Add all job postings to a single list and return it.



Aggregator (part 9)


To let Linkedin know who&#39;s connecting to it, we&#39;ll add Request Headers to our request.

There are developer tools that show various information about requests.
I&#39;ll tell you about two tools.

***Chrome****
1. In the Chrome browser, go to Menu -&gt; Tools -&gt; Developer Tools, or press Ctrl+Shift+I
2. In the browser bar, enter the URL https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco
3. Go to the Network tab. The requested URL should be at the top.
It shows that the GET method was used to send the data (POST is also an option), and that the status is 200 (success)
4. Select it and you will see information about the page.
5. Find &quot;Request Headers&quot;

***Firefox***
1. Firefox has a Firebug plugin. Install Firebug (Menu -&gt; Add-ons -&gt; Search -&gt; Firebug -&gt; install).
2. Right-click to inspect an element using Firebug. Go to the Net tab and then the HTML submenu.
3. In the browser bar, enter the URL https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco
4. The HTML submenu has a list of requests, including the one you entered in the browser bar. Click on it and go to the &quot;Headers&quot; menu
5. Find &quot;Request Headers&quot;

Add a userAgent and referrer to the Linkedin connection.



Aggregator (part 9)


1. On the left in the Project panel, find &quot;External Libraries&quot; at the bottom. Find the examples package in jsoup, and look at the classes in this package.

2. Similar to the implementations in the jsoup examples, connect to the Linkedin URL using the GET method.
This needs to be done in the LinkedinStrategy class&#39;s getJobPostings method.
Hint: You&#39;ll get a Document object.

3. Set a breakpoint right after the connection. Run the program in debug mode.
Copy the value of document.html() into the clipboard.

4. Create a file with an html extension somewhere in the project&#39;s root.
Paste the contents of the clipboard into this file, and format it using Ctrl+Alt+L. IDEA knows how to format HTML.
Hooray! This is the page&#39;s HTML code :)

5. Implement equals/hashCode methods in the JobPosting class.
Press Alt+Enter for the equals() and hashCode() methods.



Aggregator (part 9)


1. Add a getJobPostings(String searchString) method to the interface. It will return a list of job postings.

2. Correct the errors in the LinkedinStrategy class.

3. Return to the Provider class&#39;s getJavaJobPostings method. Implement it assuming that all the data is adequate.

4. Let&#39;s try to run our program and see how it works.
In the main method, write controller.scan() instead of outputting to the screen;
Accept IDEA&#39;s suggestion and create a method.
Inside the method, go through all of the providers and collect all their job postings and add them to the list. Display the number of job postings.

5. Fix the NullPointerException (NPE) if one occurs (add a stub).



Aggregator (part 9)


Open the Linkedin website (https://www.linkedin.com/jobs/)
Type &quot;Java San Francisco&quot; in the search bar. At the bottom, navigate to the second page, since URLs often differ between the first and subsequent pages.
I got this URL:
https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco&amp;start=25
It follows that:
1) if you need to filter by city, then you add the name of the city after the word &quot;Java&quot; and separate them with a &quot;+&quot; sign,
2) there are 25 job postings per page.

So, a generic URL would look something like this:
https://www.linkedin.com/jobs/search?keywords=Java+ADDITIONAL_VALUE&amp;start=PAGE_VALUE

1. Use the resulting URL to create a private String URL_FORMAT constant in LinkedinStrategy, which will be passed to String.format.
String.format(URL_FORMAT, &quot;San+Francisco&quot;, 75) must be equal to
&quot;https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco&amp;start=75&quot;
To do this, copy the URL into your code and press the required key combination over it.
Ctrl+Alt+C is for creating constants,
Ctrl+Alt+M is for creating methods,
Ctrl+Alt+V is for creating variables.

2. You need to get the web page&#39;s source code programmatically. This is done with an HTTP request. You will need a Java HTML Parser.
jsoup is a good parser. Let&#39;s use it.
Find the jsoup website, and download version 1.9.2 of the library and its source files. You don&#39;t need to include them in the project!

3. Connect the new libraries:
In IDEA, open the &quot;Project Structure&quot; menu item (in the File menu).
On the left, select Project Settings -&gt; Libraries. In the upper-right window, click &quot;+&quot;.
Choose &quot;Java&quot; if the libraries aren&#39;t there yet, or choose &quot;Attach Files or Directories&quot; to add jar files to an existing library.
In the dialog box, open the folder path from item 2. Then open the folder itself and select all of the *.jar files.

4. Read additional material for this lesson in the Community.



