taskKey="com.codegym.task.task28.task2810.big15"\n\nAggregator (part 15)


In the HtmlView class, only the getUpdatedFileContents method is still empty. In this task, I&#39;ll describe what it should do.

1. In HtmlView, create a protected Document getDocument() throws IOException method that
parses the jobPostings.html file using jsoup. The file&#39;s encoding is UTF-8. Use the filePath field.

2. Get an element that has the template class.
Make a copy of this object. Then remove the &quot;style&quot; attribute and the &quot;template&quot; class from it.
Use this element as a template to add a new row to the table of job postings.

3. Remove all of the previously added job postings. The only class they have is &quot;vacancy&quot;.
There is one existing job posting in the backup.html file: Junior Java Developer.
You need to remove all of the tr tags where class=&quot;vacancy&quot;.
But don&#39;t remove the tr tag where class=&quot;vacancy template&quot;.
Use the remove method.

4. For each job posting, in a loop:
4.1. Use the clone method to clone the tag template obtained in item 2.
4.2. Get the element that has the &quot;city&quot; class. Write the city from the job posting in it.
4.3. Get the element that has the &quot;companyName&quot; class. Write the company name from the job posting in it.
4.4. Get the hyperlink element (&lt;a&gt; tag). Write the job title in it. Create a working hyperlink to the job posting in place of href=&quot;url&quot;.
4.5. Add the outerHtml of the element that you wrote job data to,
right before the template &lt;tr class=&quot;vacancy template&quot; style=&quot;display: none&quot;&gt;.

5. Return the entire document&#39;s HTML code.

6. If an exception occurs, display its stack trace and return &quot;Some exception occurred&quot;.

7. Run the application and be sure that all of the job postings are written to the jobPostings.html file.


Требования:
1.	In the HtmlView class, add a protected Document getDocument() method, in which you will use jsoup to parse the jobPostings.html file.
2.	Implement the getUpdatedFileContents() method. To start, get a parsed page using the getDocument() method.
3.	Get an element that has the template class. Make a copy of this object. Then remove the &quot;style&quot; attribute and the &quot;template&quot; class from it.
4.	Remove from the page all previously added job postings with the &quot;vacancy&quot; class. The element with the &quot;vacancy template&quot; class must remain.
5.	Use the copy of the template to add a separate HTML element to the page before the template object for each job posting. Return the entire page&#39;s HTML code.
6.	For each job posting, there should be a valid hyperlink with the job title (title) and URL to the posting (href).
7.	Each job posting must have a valid element with the &quot;city&quot; class.
8.	Each job posting must have a valid element with the &quot;companyName&quot; class.
9.	If an exception occurs, display its stack trace and return &quot;Some exception occurred&quot;.


Aggregator (part 15)


There are still two empty methods in the HtmlView class.
In this task, I&#39;ll describe what the updateFile method should do. And I&#39;ll also tell you how to debug it.

It accepts the file&#39;s body as a String. You need to write it to the file located at the filePath path.
You already know how to do this, so I won&#39;t mention those details here.

Now, how to debug it.
Set a breakpoint and run it in debug mode.
Press Alt+F8 (Run -&gt; Evaluate Expression).
In the expression field (the top line), write System.out.println(&quot;AAA&quot;) and press Alt+V (the Evaluate button at the bottom).
Go to the console. &quot;AAA&quot; is displayed there.

You can use this window to see the current data and replace it with whatever data you need.
You can do anything you want. For example, you can delete all of a map&#39;s elements, change the value of any variable,
assign a new value, or set it to null.
Set a breakpoint in Controller.onCitySelected, and run it in debug mode.
Did it stop at that breakpoint? Great! Press Alt+F8 and enter cityName = &quot;junior&quot; in the field at the top;
then press Alt+V and F9 to continue running the application.
The list of job postings passed to HtmlView.update corresponds to the query &quot;Java junior&quot;.
Use the &quot;Expression Evaluation&quot; window. I think you&#39;ll need it in the next task.



Aggregator (part 15)


Check it out &mdash; there are two new files in the view package:
jobPostings.html (you will write data here),
backup.html (a copy of jobPostings.html for data recovery if the data in jobPostings.html is erased somehow).

Hover over and right-click jobPostings.html in the project tree on the left. Then click &quot;Open in Browser&quot;.
This way you will see the result of your parsing.

It&#39;s time to display the job postings.
1. In the HtmlView class&#39;s update method, implement the following:
1.1. create a new body for jobPostings.html, which will hold the job postings,
1.2. write the updated body to the jobPostings.html file,
1.3. All exceptions must be handled in this method. Display a stack trace if an exception occurs.

2. To implement item 1, create two empty private methods:
String getUpdatedFileContents(List&lt;JobPosting&gt;) and void updateFile(String),
We will implement them in future tasks.

3. To get to the jobPostings.html file, create a relative path to it.
In the HtmlView class, create a private final String filePath field and assign it the relative path to jobPostings.html.
The path must be relative to the project&#39;s root.
Create the path dynamically using this.getClass().GetPackage() and the &quot;/&quot; separator.
Hint: the path must begin with &quot;./&quot;.



Aggregator (part 15)


To run the application, you need to emulate a user event:
1. In the HtmlView class, create a public void emulateCitySelection() method.
Let this method call the controller using the city &quot;Odessa&quot;.

2. To check whether everything is working, display something on the console in the HtmlView&#39;s update method, for example, the number of job postings.
This is an indication that you can move on.

3. To get started, you need to update Aggregator&#39;s main method.
3.1. Create a view, model, and controller.
3.2. Pass the controller to the view.
3.3. Call the view&#39;s emulateCitySelection method.

4. Run the application! Wait a few seconds to get the data.
Did it work? Great! It works!



Aggregator (part 15)


Model has a selectCity method to which the name of the city for the job search is passed.
Obviously, this method will be called by the controller, since it decides which model to use.

1. Add a new Model model field to the Controller.

2. Remove the scan() method from the Controller. Its logic has been moved to the model.

3. Remove the constructor, toString method, and providers field from the controller.

4. Create a Controller constructor with a Model parameter.
Throw an IllegalArgumentException for invalid data

5. Create a public void onCitySelected(String cityName) method in Controller, in which we will call the appropriate method on the model.

6. Remove the code from the main method. This code is no longer valid.



Aggregator (part 15)


View has an update method. The list of job postings is passed to it to be displayed.
Obviously, only the model will call this method, since only the model gets the data.
It&#39;s time to create the model.

1. Create a Model class in the model package.

2. Add two fields: 1) a view, 2) an array of providers.

3. Create a constructor with two parameters: 1) a view, 2) an array of providers.
Throw an IllegalArgumentException if invalid data is passed.

4. Create a public void selectCity(String city) method.

5. Implement the selectCity method:
5.1. get job postings from each provider,
5.2. update the view with the list of job postings from item 5.1.



