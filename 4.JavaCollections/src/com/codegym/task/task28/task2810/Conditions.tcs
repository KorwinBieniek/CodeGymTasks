taskKey="com.codegym.task.task28.task2810.big02"\n\nAggregator (part 2)


1. Create a Controller class which will contain business logic.

2. Add a public constructor to Controller. It should accept as many providers as are passed to it.
Save them to a private providers field.
Do you remember how to do that? You need to press Alt+Enter on the constructor&#39;s parameter, and then select &quot;Create Field for Parameter &#39;providers&#39;&quot;.

3. If no providers are passed to the controller&#39;s constructor, then throw an IllegalArgumentException.

4. Create a toString method in the Controller class (Alt+Insert -&gt; toString()) with a standard implementation (it should display the providers field).

5. Create a provider in the main method. Then create the controller using this provider.

6. In the main method, display the Controller object on the console.


Требования:
1.	Create a Controller class.
2.	Add a constructor to the Controller class that accepts as many providers as are passed to it.
3.	In the constructor, save all of the providers to the providers field. If no providers are passed, then throw an IllegalArgumentException.
4.	In the Controller class, create a toString method with a standard implementation.
5.	In the main method, create a provider and a controller using that provider.
6.	In the main method, display the controller object on the console.


Aggregator (part 2)


It&#39;s time to work with information from the Internet a little. In this task, you&#39;ll be writing an aggregator for Java job posting.
What do we need?
There should be a list of websites we are searching for jobs.
First, we&#39;ll use https://www.linkedin.com/jobs/. We&#39;ll add other job search sites later.
These are the same site, just with different domains.

Where do we start our implementation? With the main method, of course! :)
1. Create an Aggregator class with a main method.

2. Create a model package, and create a Provider class inside it.
This class represents a generalization of how job posting data is retrieved.

3. Since the same script will be executed for each site, we&#39;ll use the Strategy pattern. Read about it online on Wikipedia.
Create a Strategy interface in the model package.
It will be responsible for fetching data from a website.

4. Add a Strategy strategy field to the Provider class. Add a constructor with this parameter and an appropriate setter.



