taskKey="com.codegym.task.task20.task2028.big02"\n\nBuild a tree (part 2)


Despite the fact that our tree descends from the AbstractList class, it is not a list in the traditional sense.
In particular, we don't have access to methods that take an element's index as an argument.
You need to override such methods and throw a new type of exception: UnsupportedOperationException.

Here's a list of them:
public String get(int index)
public String set(int index, String element)
public void add(int index, String element)
public String remove(int index)
public List<String> subList(int fromIndex, int toIndex)
protected void removeRange(int fromIndex, int toIndex)
public boolean addAll(int index, Collection<? extends String> c)


Requirements:
1.	An UnsupportedOperationException should occur if the get(int index) method is called.
2.	An UnsupportedOperationException should occur if the set(int index, String element) method is called.
3.	An UnsupportedOperationException should occur if the add(int index, String element) method is called.
4.	An UnsupportedOperationException should occur if the String remove(int index) method is called.
5.	An UnsupportedOperationException should occur if the subList(int fromIndex, int toIndex) method is called.
6.	An UnsupportedOperationException should occur if the removeRange(int fromIndex, int toIndex) method is called.
7.	An UnsupportedOperationException should occur if the addAll(int index, Collection&lt;? extends String&gt; c) method is called.


Build a tree (part 1)


Amigo, it seems you may now have an adequate foundation. It's time to test your skills by doing a big task!
Today, we'll implement our own tree in a slightly non-standard way (based on AbstractList).
To get background information, use your favorite search engine and the text below.

The nodes of the tree should be like those in the picture:
http://info.javarush.ru/uploads/images/00/04/89/2014/03/21/ee9a9b.jpg

First, let's make our tree a descendant of the AbstractList class with a String parameter, and
we'll implement the Cloneable and Serializable interfaces.

For now, leave the standard implementations of the get(int index) and size() methods.



