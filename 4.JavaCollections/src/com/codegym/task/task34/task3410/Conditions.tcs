taskKey="com.codegym.task.task34.task3410.big09"\n\nSokoban (part 9)


Various events will occur during the game. Let&#39;s create an
EventListener interface. Every class that wants to handle events must
implement it. And classes that generate events will call
this interface&#39;s methods.
9.1. Add the EventListener interface to the controller package.
9.2. Add these void methods to the interface:
9.2.1. move(Direction direction) - moves the object in the specified direction.
9.2.2. restart() - restart the current level.
9.2.3. startNextLevel() - start the next level.
9.2.4. levelCompleted(int level) - the level with the passed index has been completed.
9.3. Add the EventListener interface to the Controller class, and write the stubs required to
implement the interface.
9.4. Add an EventListener eventListener field to the Model and Board classes.
9.5. Add the setEventListener(EventListener eventListener) method
to the Model, View, and Board classes. In the View class, this method must call the analogous method on the
board object. In the Model and Field classes, it must set the value of the internal eventListener fields.


Требования:
1.	Add the EventListener interface to the controller package.
2.	Add the following methods to the EventListener interface: move(Direction direction), restart(), startNextLevel(), and levelCompleted(int level).
3.	Add the EventListener interface to the Controller class, and write the stubs required to implement the interface.
4.	Add an EventListener eventListener field to the Model and Board classes.
5.	Implement the setEventListener(EventListener eventListener) method in the Model, View and Board classes.


Sokoban (part 9)


You&#39;ve created the complete collection of game objects. Let&#39;s create a class to
store these objects.
8.1. Create a GameObjects class in the model package.
8.2. Add the following:
8.2.1. Set&lt;Wall&gt; walls, Set&lt;Box&gt; boxes, Set&lt;StorageLocation&gt; storageLocations, and Player player fields.
8.2.2. Getters for these fields.
8.2.3. A class constructor that accepts Set&lt;Wall&gt; walls, Set&lt;Box&gt; boxes, Set&lt;StorageLocation&gt; storageLocations,
and Player player arguments, and that initializes the class&#39;s fields.
8.2.4. A Set&lt;GameObject&gt; getAll() method. It must return a set containing
all of the objects stored in the object.




Sokoban (part 9)


Let&#39;s make the Wall class. A wall can collide with other objects, but it
can&#39;t move.
7.1. Add a Wall class to the model package.
7.2. Make the class inherit the appropriate parent class.
7.3. Implement a constructor with int x and int y parameters.
7.4. Implement the method for drawing.
Hint: you could draw walls as brown squares, but
no one is limiting your choice of color. Show your full creative potential.



Sokoban (part 9)


It&#39;s time to create the StorageLocation class. This class will be responsible for the game board cells
that all the boxes must be moved to. Objects of this type must not move
across the board or collide with other game objects.
6.1. Add a StorageLocation class to the model package.
6.2. The class must inherit the most appropriate base class.
6.3. Add a constructor that accepts int x and int y arguments. The width and height
of storage locations must be equal to 2.
6.4. Implement the method for drawing a storage location. Hint: you can use red and
an unfilled circle.

As with previous game objects, you can test the draw method in the
Board class&#39;s paint() method.



Sokoban (part 9)


Box and Player game objects can not only
collide with other objects, but also move around the board.
5.1. Create a Player class and a Box class in the model package. Make each of them
inherit the most appropriate class.
5.2. The created classes must support the interface responsible for object
movement.
5.3. Add constructors that accept int x and int y arguments.
5.4. In each class, implement the method responsible for movement. It must shift
the object&#39;s (x, y) coordinates by the passed values.
5.5. In each class, implement the method responsible for drawing. This method should:
set a color and draw some basic shapes. Be sure
that the coordinates of the shape&#39;s center are (x, y), and that its width and height match
the width and height fields.
Hint: you can draw the player as a solid yellow circle, and boxes &mdash; as orange
squares with diagonals. But these are just examples. You can choose the colors yourself.
The appearance of your objects is limited only by your imagination and the methods available
in the Graphics class.

To check how your box and player are drawn, you can create
a Box or Player object in the Board class&#39;s paint() method and call the object&#39;s
draw() method. Do this only do to test the draw() methods. We&#39;ll implement the
paint() method differently in the future.



Sokoban (part 9)


We already have a shared GameObject class. It&#39;s time to create classes
for specific types of game objects.
4.1. Some game objects can move (player and boxes) and some can&#39;t (walls
and storage locations).
4.1.1. Add the Movable interface to the model package.
4.1.2. The Movable interface must have a void move(int x, int y) method.
4.2. Add a Direction enum to the model package. It must have the following values:
LEFT, RIGHT, UP, and DOWN. This type will be used to describe the direction
of an object&#39;s movement.
4.3. The &quot;storage location&quot; objects don&#39;t support collision detection (the player and
boxes can freely move over them). As for other objects,
they must not pass through one another, i.e. they should collide. For example,
a box can&#39;t be pushed through a wall.
4.3.1. Add an abstract CollisionObject class to the model package.
3.4.2. The CollisionObject class must inherit GameObject.
4.3.3. Add the following to the CollisionObject class:
4.3.3.1. A constructor that accepts int x and int y arguments.
4.3.3.2. A boolean isCollision(GameObject gameObject, Direction direction) method.
This method should return true if the current
object will collide with the gameObject parameter after moving a distance of BOARD_CELL_SIZE
in the direction specified by the direction parameter.
Otherwise, it should return false. If (x, y) coordinates match, you have a collision.



