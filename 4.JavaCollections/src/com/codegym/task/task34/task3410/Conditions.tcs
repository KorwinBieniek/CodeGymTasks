taskKey="com.codegym.task.task34.task3410.big06"\n\nSokoban (part 6)


It&#39;s time to create the StorageLocation class. This class will be responsible for the game board cells
that all the boxes must be moved to. Objects of this type must not move
across the board or collide with other game objects.
6.1. Add a StorageLocation class to the model package.
6.2. The class must inherit the most appropriate base class.
6.3. Add a constructor that accepts int x and int y arguments. The width and height
of storage locations must be equal to 2.
6.4. Implement the method for drawing a storage location. Hint: you can use red and
an unfilled circle.

As with previous game objects, you can test the draw method in the
Board class&#39;s paint() method.


Требования:
1.	Add a StorageLocation class to the model package.
2.	The class must inherit the most appropriate base class.
3.	Add a constructor that accepts int x and int y arguments. The width and height of storage locations must be equal to 2.
4.	Implement the method for drawing a storage location.


Sokoban (part 6)


Box and Player game objects can not only
collide with other objects, but also move around the board.
5.1. Create a Player class and a Box class in the model package. Make each of them
inherit the most appropriate class.
5.2. The created classes must support the interface responsible for object
movement.
5.3. Add constructors that accept int x and int y arguments.
5.4. In each class, implement the method responsible for movement. It must shift
the object&#39;s (x, y) coordinates by the passed values.
5.5. In each class, implement the method responsible for drawing. This method should:
set a color and draw some basic shapes. Be sure
that the coordinates of the shape&#39;s center are (x, y), and that its width and height match
the width and height fields.
Hint: you can draw the player as a solid yellow circle, and boxes &mdash; as orange
squares with diagonals. But these are just examples. You can choose the colors yourself.
The appearance of your objects is limited only by your imagination and the methods available
in the Graphics class.

To check how your box and player are drawn, you can create
a Box or Player object in the Board class&#39;s paint() method and call the object&#39;s
draw() method. Do this only do to test the draw() methods. We&#39;ll implement the
paint() method differently in the future.



Sokoban (part 6)


We already have a shared GameObject class. It&#39;s time to create classes
for specific types of game objects.
4.1. Some game objects can move (player and boxes) and some can&#39;t (walls
and storage locations).
4.1.1. Add the Movable interface to the model package.
4.1.2. The Movable interface must have a void move(int x, int y) method.
4.2. Add a Direction enum to the model package. It must have the following values:
LEFT, RIGHT, UP, and DOWN. This type will be used to describe the direction
of an object&#39;s movement.
4.3. The &quot;storage location&quot; objects don&#39;t support collision detection (the player and
boxes can freely move over them). As for other objects,
they must not pass through one another, i.e. they should collide. For example,
a box can&#39;t be pushed through a wall.
4.3.1. Add an abstract CollisionObject class to the model package.
3.4.2. The CollisionObject class must inherit GameObject.
4.3.3. Add the following to the CollisionObject class:
4.3.3.1. A constructor that accepts int x and int y arguments.
4.3.3.2. A boolean isCollision(GameObject gameObject, Direction direction) method.
This method should return true if the current
object will collide with the gameObject parameter after moving a distance of BOARD_CELL_SIZE
in the direction specified by the direction parameter.
Otherwise, it should return false. If (x, y) coordinates match, you have a collision.



Sokoban (part 6)


Soon we&#39;ll be creating various game objects. It would be handy to be able
to draw them somewhere right away and see how they look. Objects will be
drawn on the game board represented by a Board object.
You&#39;ve received modified code for the View class that creates a Board object and
sets up the view properly. You will also need:
3.1. Add to the view package a Board class that inherits JPanel.
3.2. Add the following to the Board class:
3.2.1. A constructor with a View view parameter.
3.2.2. A View view field that must be initialized in the constructor.
3.2.3. Create a stub for a paint(Graphics g) method. It won&#39;t do anything yet.
3.3. Add a call to the view&#39;s init() method to the Controller class constructor.
3.4. The Controller class&#39;s main() method must create a new Controller object.



Sokoban (part 6)


The foundation is laid, so now let&#39;s start building. You can think of the gameplay
as the interaction of GameObject objects. We&#39;ll have several types of them:
Box, StorageLocation (the place where you need to put the box), Wall, and Player.
2.1. Add an abstract GameObject class to the model package.
2.2. Add the following fields to the GameObject class: int x, int y, int width, and int height. These fields represent the position and
size of the object when drawn.
2.3. Add setters and getters for the class&#39;s fields.
2.4. Add to the Model class a public static int BOARD_CELL_SIZE = 20 constant. This
represents the size of cells on the game board. All game objects will occupy one cell
of the game board. This is the size that will be used when calculating movement and
object collisions. The size stored inside an object will only be
used when drawing that object.
2.5. Add two constructors to the GameObject class:
2.5.1. GameObject(int x, int y)
2.5.2. GameObject(int x, int y, int width, int height)
The constructors must initialize all of the class&#39;s fields. If width and height aren&#39;t passed,
then use BOARD_CELL_SIZE as the width and height.
2.6. Add an abstract void draw(Graphics graphics) method to the GameObject class. This method
will be implemented differently in each type of game object. In other words,
each type of game object will know how it should be drawn and will
draw itself in the graphics context. Graphics is an abstract class from the
java.awt library.



Sokoban (part 6)


Today we&#39;re going to write our own implementation of the game Sokoban. This is a logical puzzle game.
You can read more about it on Wikipedia. The game will consist of 3
main components (as you may have guessed, you&#39;ll need the MVC pattern).
The graphical interface will be implemented using Swing.
1.1. Create a view package and add a View class that inherits JFrame. This class
will be responsible for displaying our game.
1.2. Create a model package and add a Model class. This class will be responsible for our game&#39;s
model. How do you like the class names? Totally unpredictable, right? :) Actually,
it&#39;s very important to name classes in a way that allows anyone seeing your project for the first time
to immediately understand what the classes are responsible for.
1.3. Create a controller package and add a Controller class with a default constructor.
1.4. Add a View class constructor that accept a Controller and saves it
in a field inside the class (which you will also need to add). Name the field &quot;controller&quot;.
1.5. Add View view and Model model fields to the Controller class. Initialize them in
the constructor.
1.6. Since the controller is our main class, add the main method to it.



