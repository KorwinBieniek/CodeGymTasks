taskKey="com.codegym.task.task34.task3410.big10"\n\nSokoban (part 10)


The game will have several levels, and all of them will be stored in a text file. Now we&#39;ll
write a LevelLoader test stub. Why a test stub? We don&#39;t
need the full functionality yet. It&#39;s pretty complicated, so we&#39;ll leave it for later. For now:
10.1. Create a LevelLoader class in the model package.
10.2. Add a constructor that accepts a Path levels argument. The levels parameter is
the path to the test file containing the level descriptions.
10.3. Add the GameObjects getLevel(int level) method to the LevelLoader class. For now, it doesn&#39;t
matter what this method returns. For now, have it always return a set with: one player,
one storage location, one box, and several walls. That will make it easier to debug the game.
The coordinates of each object must be non-zero and multiples of half of
BOARD_CELL_SIZE (the center of each object must be in the middle of a cell).


Требования:
1.	Create a LevelLoader class in the model package.
2.	Add a constructor that accepts a Path levels argument.
3.	Add the GameObjects getLevel(int level) method to the LevelLoader class.
4.	Create a getLevel method test stub as outlined in the task conditions.


Sokoban (part 10)


Various events will occur during the game. Let&#39;s create an
EventListener interface. Every class that wants to handle events must
implement it. And classes that generate events will call
this interface&#39;s methods.
9.1. Add the EventListener interface to the controller package.
9.2. Add these void methods to the interface:
9.2.1. move(Direction direction) - moves the object in the specified direction.
9.2.2. restart() - restart the current level.
9.2.3. startNextLevel() - start the next level.
9.2.4. levelCompleted(int level) - the level with the passed index has been completed.
9.3. Add the EventListener interface to the Controller class, and write the stubs required to
implement the interface.
9.4. Add an EventListener eventListener field to the Model and Board classes.
9.5. Add the setEventListener(EventListener eventListener) method
to the Model, View, and Board classes. In the View class, this method must call the analogous method on the
board object. In the Model and Field classes, it must set the value of the internal eventListener fields.



Sokoban (part 10)


You&#39;ve created the complete collection of game objects. Let&#39;s create a class to
store these objects.
8.1. Create a GameObjects class in the model package.
8.2. Add the following:
8.2.1. Set&lt;Wall&gt; walls, Set&lt;Box&gt; boxes, Set&lt;StorageLocation&gt; storageLocations, and Player player fields.
8.2.2. Getters for these fields.
8.2.3. A class constructor that accepts Set&lt;Wall&gt; walls, Set&lt;Box&gt; boxes, Set&lt;StorageLocation&gt; storageLocations,
and Player player arguments, and that initializes the class&#39;s fields.
8.2.4. A Set&lt;GameObject&gt; getAll() method. It must return a set containing
all of the objects stored in the object.




Sokoban (part 10)


Let&#39;s make the Wall class. A wall can collide with other objects, but it
can&#39;t move.
7.1. Add a Wall class to the model package.
7.2. Make the class inherit the appropriate parent class.
7.3. Implement a constructor with int x and int y parameters.
7.4. Implement the method for drawing.
Hint: you could draw walls as brown squares, but
no one is limiting your choice of color. Show your full creative potential.



Sokoban (part 10)


It&#39;s time to create the StorageLocation class. This class will be responsible for the game board cells
that all the boxes must be moved to. Objects of this type must not move
across the board or collide with other game objects.
6.1. Add a StorageLocation class to the model package.
6.2. The class must inherit the most appropriate base class.
6.3. Add a constructor that accepts int x and int y arguments. The width and height
of storage locations must be equal to 2.
6.4. Implement the method for drawing a storage location. Hint: you can use red and
an unfilled circle.

As with previous game objects, you can test the draw method in the
Board class&#39;s paint() method.



Sokoban (part 10)


Box and Player game objects can not only
collide with other objects, but also move around the board.
5.1. Create a Player class and a Box class in the model package. Make each of them
inherit the most appropriate class.
5.2. The created classes must support the interface responsible for object
movement.
5.3. Add constructors that accept int x and int y arguments.
5.4. In each class, implement the method responsible for movement. It must shift
the object&#39;s (x, y) coordinates by the passed values.
5.5. In each class, implement the method responsible for drawing. This method should:
set a color and draw some basic shapes. Be sure
that the coordinates of the shape&#39;s center are (x, y), and that its width and height match
the width and height fields.
Hint: you can draw the player as a solid yellow circle, and boxes &mdash; as orange
squares with diagonals. But these are just examples. You can choose the colors yourself.
The appearance of your objects is limited only by your imagination and the methods available
in the Graphics class.

To check how your box and player are drawn, you can create
a Box or Player object in the Board class&#39;s paint() method and call the object&#39;s
draw() method. Do this only do to test the draw() methods. We&#39;ll implement the
paint() method differently in the future.



