taskKey="com.codegym.task.task30.task3008.big03"\n\nChat (part 3)


Before moving on, we need to work out the protocol for communication between the client and server.

Let's outline the main aspects of the protocol:
- When a new client wants to connect to the server, the server should request the client name.
- When a client receives a name request from the server, it should send its name to the server.
- When the server receives a client name, it should accept the name or request a new one.
- When a new client is added to the chat, the server should inform the other participants about the new client.
- When a client leaves the chat, the server should inform the other participants.
- When the server receives a text message from a client, it should forward it to all the other chat participants.

For each item in the protocol described above, add corresponding values to the MessageType enum:
1) NAME_REQUEST – A name request.
2) USER_NAME – A username.
3) NAME_ACCEPTED – The name is accepted.
4) TEXT – A text message.
5) USER_ADDED – The user was added.
6) USER_REMOVED – The user was deleted.


Requirements:
1.	There must be a NAME_REQUEST field in the MessageType enum.
2.	There must be a USER_NAME field in the MessageType enum.
3.	There must be a NAME_ACCEPTED field in the MessageType enum.
4.	There must be a TEXT field in the MessageType enum.
5.	There must be a USER_ADDED field in the MessageType enum.
6.	There must be a USER_REMOVED field in the MessageType enum.


Chat (part 2)


First of all, for convenience in working with the console, we'll implement the ConsoleHelper class. In
the future, any work with the console should happen through this class.

Add the following to it:
1) A static BufferedReader field initialized using System.in.
2) A static writeMessage(String message) method that should display
the message string on the console.
3) A static String readString() method that should read a string from
the console. If an exception occurs while reading, display the following message
to the user: "An error occurred while trying to enter text. Try again." And
read the input again. The method should not throw an IOException upward.
Other exceptions should not be handled.
4) A static int readInt() method. It should return the entered number and
use the readString() method. Handle any NumberFormatExceptions inside
the method. If one occurs, then display the following message to the user "An error
while trying to enter a number. Try again." And read in another number.

In this and later tasks, unless specified otherwise, all of a class's fields must
be private and its methods must be public.



Chat (part 1)


Today we're going to write a chat system: A set of programs that you can use
to exchange text messages. The system will consist of one server and
multiple clients, one for each chat participant.

Let's start with the server. We'll need the following classes:
1) Server - The server's main class.
2) MessageType - An enum responsible for the types of messages sent between
a client and the server.
3) Message - The class responsible for the sent messages.
4) Connection - A class representing the connection between a client and the server.
5) ConsoleHelper - A helper class for reading or writing to the console.

Create these classes and add the main method to the Server class.



