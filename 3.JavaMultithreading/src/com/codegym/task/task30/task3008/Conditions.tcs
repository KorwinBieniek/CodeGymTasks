taskKey="com.codegym.task.task30.task3008.big09"\n\nChat (part 9)


The second stage, which is no less important, is sending information to the client (new participant) about the other clients (chat participants).

To do this, add a private void notifyUsers(Connection connection, String userName) throws IOException method,
where connection is the connection with the participant we are sending information to, and userName is that participant's name.
The method should:
1) Iterate over connectionMap.
2) For each element in step 1, get the client name, generate a USER_ADDED message that includes the passed name.
3) Use the connection field to send the generated message.
4) Don't send a USER_ADDED message to the user whose name is equal to userName. The user already knows about himself or herself.


Requirements:
1.	The Handler class should have a private void notifyUsers(Connection connection, String userName) method.
2.	For each pair in connectionMap, the notifyUsers() method should use the connection field to send a message indicating that a user called name has been added.
3.	The notifyUsers() method should NOT send a USER_ADDED message if the user&#39;s name matches the second parameter (userName).


Chat (part 8)


The Handler class must implement the client communication protocol.
Let's identify independent stages of the protocol and implement them in separate methods:
The first stage is the handshake (in which the server meets the client).
We'll implement it in the private String method serverHandshake(Connection connection) throws IOException,
ClassNotFoundException method. The method takes a connection as an argument, and returns the name of the new client.

The implementation should:
1) Generate and send a username request
2) Get the client's response
3) Verify that the response has a username
4) Extract the name from the response, and verify that it is not empty and is not already being used (use connectionMap)
5) Add the new user and connection to connectionMap
6) Send an informational message to the client, informing it that the name was accepted
7) If any verification step fails, request the client's name again
8) Return the accepted name as the return value



Chat (part 7)


Because the server can work with multiple clients simultaneously, we're going to need
a method to send a message to everyone all at once.

Add the following to the Server class:
1) A static Map<String, Connection> connectionMap field, where the key is the client name,
and the value is the connection with the client.
2) Initialization of the field from step 7.1 using the appropriate Map from the java.util.concurrent library,
since this field will be accessed from different threads and we need to ensure thread safety.
3) A static void sendBroadcastMessage(Message message) method, which should send the message argument
to all connections in connectionMap. If an IOException occurs while the message is being sent,
you need to catch it and inform the user that the message couldn't be sent.



Chat (part 6)


Let's move on to the most important part: writing the Server class.
The server must support multiple simultaneous connections with different clients.
This can be done using the following algorithm:
- The server creates a server socket connection.
- In a loop, the server waits for some client to connect to the socket.
- It creates a new Handler thread on which messages will be exchanged with the client.
- It waits for another connection.

Add the following:
1) To the Server class, a nested private static Handler class that inherits Thread.
2) To the Handler class, a Socket socket field.
3) To the Handler class, a constructor that has a Socket parameter and uses it to initialize the appropriate field.
4) The Server's main method should:
a) Request a server port using ConsoleHelper.
b) Create a java.net.ServerSocket object using the port from the previous step.
c) Display a message indicating that the server is running.
d) In an infinite loop, listen for and accept incoming socket connections with the newly created server socket.
e) Create and start a new Handler thread, passing the socket from the previous step to the constructor.
e) Once the Handler thread is created, proceed to the next iteration of the loop.
g) Be sure that the server socket is closed if there is an exception.
h) If an Exception occurs, catch it and display an error message.



Chat (part 5)


The client and server will communicate through a socket connection.
One side will write data to the socket, while the other will read. They interact by exchanging Messages.
The Connection class will wrap the java.net.Socket class,
which needs to be able to serialize and deserialize Message objects to/from the socket.
The methods of this class should be callable from different threads.

Add the following to the Connection class:

1) Final fields:
a) Socket socket
b) ObjectOutputStream out
c) ObjectInputStream in

2) A constructor that has a Socket parameter and initializes the object's fields.
To initialize the in and out fields, use the socket's corresponding threads.
The constructor may throw an IOException. You need to create an ObjectOutputStream object before creating an ObjectInputStream object.
Otherwise, threads trying to establish a connection through the Connection class may block each other.
You can read more about this in the documentation for the ObjectInputStream class.

3) A void send(Message message) throws IOException method.
It should write (serialize) the message to the ObjectOutputStream.
This method will be called from multiple threads.
Be sure that only one thread can write to the ObjectOutputStream object at a time.
Other threads must wait their turn. However, other methods of the Connection class should not be blocked.

4) A Message receive() throws IOException, ClassNotFoundException method. It should read (deserialize) data from the ObjectInputStream.
Make it so a read operation can't be performed simultaneously by multiple threads,
but be sure not to block calls to other methods of the Connection class.

5) A SocketAddress getRemoteSocketAddress() method, which returns the remote address of the socket connection.

6) A void close() throws IOException method, which should close all the resources used by the object.

The Connection class should support the Closeable interface.



Chat (part 4)


A Message is data that one party sends and the other receives.
Each message must have a MessageType and some additional data,
for example, a text message must contain text.
Since the messages will be created in one program and read in another,
it will be convenient to use serialization to convert objects to sequences of bits and back again.

Add the following to the Message class:
1) support for the Serializable interface.
2) a final MessageType field that will contain the message type.
3) a final String field that will contain the message data.
4) getters for these fields.
5) a constructor that accepts only a MessageType. It should initialize
the type field using the passed parameter, and leave the data field as null.
6) a constructor that has MessageType type and String data parameters. It should also initialize all of the object's fields.



