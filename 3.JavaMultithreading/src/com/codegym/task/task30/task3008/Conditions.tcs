taskKey="com.codegym.task.task30.task3008.big20"\n\nChat (part 20)


We've already implemented a console-based client and a chat bot. Why not a client with a GUI?
It will also work with our server, but it will have a graphic window, buttons, etc.
Well, let's get started. The Model-View-Controller (MVC) pattern is well suited for  a GUI-based client.
You should have become acquainted with this pattern already.
If necessary, use the Internet to refresh your knowledge of MVC.
In our task, the class responsible for the model will have the simplest implementation.

Let's write it:
1) Create a new ClientGuiModel class in the client package. All client-related classes should be created in this package.
2) Add a set of strings as a final allUserNames field. It will store a list of all the chat participants. Initialize it.
3) Add a String newMessage field, which will store the new message received by the client.
4) Add an allUserNames getter that prevents modification of the returned Set.
Figure out how this can be done using a method of the Collections class.
5) Add a setter and a getter for the newMessage field.
6) Add a void addUser(String newUserName) method that adds the participant's name to a set containing all the participants.
7) Add a void deleteUser(String userName) method that removes the participant's name from the set.


Requirements:
1.	The ClientGuiModel class must be created in the client package.
2.	The allUserNames set of strings must be initialized and declared with the private final modifier.
3.	The private newMessage field must be a String.
4.	A proper getter for the allUserNames field must be created in the ClientGuiModel class.
5.	The ClientGuiModel class must have a correct getter and setter for the newMessage field.
6.	The addUser() method should add the new username to the allUserNames set.
7.	The deleteUser method should remove the passed username from the allUserNames set.


Chat (part 19)


Now we'll implement the BotSocketThread class, or rather we'll override some
methods. All of its main functionality is inherited from SocketThread.

1) Override the clientMainLoop() method:
a) Use the sendTextMessage() method to send this message:
"Hello, there. I'm a bot. I understand the following commands: date, day, month, year, time, hour, minutes, seconds."
b) Call the parent class's clientMainLoop() method.
2) Override the processIncomingMessage(String message) method. It should process incoming messages as follows:
a) Display the text of the received message on the console.
b) Get the sender's name and the message text from the message. They are separated by ": ".
c) Send a reply based on the text of the received message. If the text of the message is:
"date" - send a message containing the current date in the format "d.MM.YYYY";
"day" - in the format "d";
"month" - "MMMM";
"year" - "YYYY";
"time" - "H:mm:ss";
"hour" - "H";
"minutes" - "m";
"seconds" - "s".
Use the format above to create a SimpleDateFormat object.
To get the current date, you must use the Calendar class and getTime() method.
The response must include the name of the client who sent the request and is waiting for a response,
e.g. if Bob sent the "time" request, we should send the following response:
"Information for Bob: 12:30:47".

Our bot is ready. Start the server, start the bot and a regular client, and be sure that everything works correctly.
Remember that there are different types of messages and they don't always contain ":"



Chat (part 18)


Sometimes you can't find someone worth talking to. Don't start talking to yourself :).
Let's write a bot that will be a client that automatically respond to certain commands.
The easiest version would be a bot that sends the current time or date when someone asks for it.

Let's start with that:
1) Create a new BotClient class in the client package. It must inherit Client.
2) In the BotClient class, create a BotSocketThread inner class that inherits SocketThread. The BotSocketThread class must be public.
3) Override the following methods:
a) getSocketThread(). It should create and return a BotSocketThread object.
b) shouldSendTextFromConsole(). It should always return false. We don't want the bot to send text entered from the console.
c) getUserName(). This method should generate a new bot name, for example, date_bot_X, where X is any number from 0 to 99.
Use the Math.random() method to generate X.
4) Add the main() method. It should create a new BotClient object and call its run() method.



Chat (part 17)


The last, but most important, method of the SocketThread class is the void run() method. Add it.
Given the methods we've already created, implementing this method looks very simple.

Let's do it:
1) Request the server address and server port using the getServerAddress() and getServerPort() methods.
2) Create a new java.net.Socket object using the data obtained in previous step.
3) Create a Connection object using the socket from step 17.2.
4) Call the method that implements the client-server "handshake" (clientHandshake()).
5) Call the method that implements the main loop for processing server messages.
6) If an IOException or ClassNotFoundException is thrown, notify the main thread
using notifyConnectionStatusChanged() and false as the argument.

The client is ready. You can start the server and several clients, and check how everything works.



Chat (part 16)


Now everything is ready for us to add the necessary methods to the SocketThread class.

1) Add a protected clientHandshake() throws IOException, ClassNotFoundException method.
This method will represent the client to the server. It must:
a) In a loop, use the connection field to receive messages.
b) If a received message is a NAME_REQUEST (the server has requested a name),
use the getUserName method to ask the user to enter a username, create a new message
that is a MessageType.USER_NAME and contains the entered name, and send the message to the server.
c) If a received message is a MessageType.NAME_ACCEPTED (the server has accepted the name), it means
the server has accepted the client name, and you need to inform the main thread, which is eagerly waiting for this news.
Do this by passing true to the notifyConnectionStatusChanged() method. Then exit the method.
d) If there is a message of any other type, throw an IOException("Unexpected MessageType").

2) Add a protected void clientMainLoop() throws IOException, ClassNotFoundException method.
This method will implement the server's main message-processing loop.
Inside the method:
a) Use the connection field to receive a message from the server.
b) If it is a text message (MessageType.TEXT), process it using the processIncomingMessage() method.
c) If the message is a MessageType.USER_ADDED, process it using the informAboutAddingNewUser() method.
d) If the message is a MessageType.USER_REMOVED, process it using the informAboutDeletingNewUser() method.
e) If the client receives a message of some other type, throw an IOException("Unexpected MessageType").
f) Put the code from the previous steps in an infinite loop. The loop will terminate automatically
if an error (exception) occurs or the thread on which the loop is running is interrupted.



Chat (part 15)


Let's write the implementation of the SocketThread class. We'll start with simple helper methods.

Add methods that will be available to subclasses but not accessible to other
classes outside the package:
1) void processIncomingMessage(String message) - It should display the message on the console.
2) void informAboutAddingNewUser(String userName) - It should display a message
indicating that a participant named userName has joined the chat.
3) void informAboutDeletingNewUser(String userName) - It should display a message
indicating that the participant named userName has left the chat.
4) void notifyConnectionStatusChanged(boolean clientConnected) - This method
must:
a) Set the external Client object's clientConnected field equal to the passed argument.
b) Notify (wake) the Client class's waiting main stream. Hint:
use synchronization at the level of the current instance of the outer class and use the notify() method.
The SocketThread class's outer class is the Client class.



