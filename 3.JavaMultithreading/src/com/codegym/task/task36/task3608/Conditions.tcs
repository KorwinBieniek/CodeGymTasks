taskKey="com.codegym.task.task36.task3608.big01"\n\nMVC (part 1)


Hi! This task will cover the Model-View-Controller (MVC) pattern.
Together we are going to build an MVC architecture. Dive in deep to understand why you need to implement it the way that I show you.
Read the additional literature - https://codegym.cc/groups/posts/303-part-7-introducing-the-mvc-model-view-controller-pattern
You'll probably be asked about this pattern in an interview or will be given a task that will require you to implement it.

Let's begin...
You have two packages: bean, which has only one class called User, and dao,
which contains database emulation code in the mock and UserDao packages. UserDao is a DAO layer (i.e. Database Access Object layer).
It contains various methods for storing and retrieving objects from a database.
A real application wouldn't have the line "private DataSource dataSource = DataSource.getInstance()".
I've implemented DataSource as a singleton. In reality, you'd have something more like this:
@Autowired
private DataSource dataSource;
This framework you'll use in real applications will create the database object itself and initialize the dataSource field.

Remember, services work with the DAO layer. No other classes touch the DAO. The business logic is described in services.
Services retrieve data from the database using the DAO, process it, and hand it out to whoever requested the data.
However, not all data is stored in a database. For example, a signed-in user will be stored in a special Model object.
An object that contains data required to display information to the client is called the Model.
Additionally, this Model object contains references to all of the required services.
If there is a lot of data to display, then it is broken out into separate objects.

Let's write an application that will display a list of users and do something with them, for example, update their data and delete them.

1. Create a model package, and create a DataModel class inside it.
DataModel is the entity that will store the data we need to display to the client.
Create a List users field, and a corresponding getter and setter. This will be the list of users to display.

2. We should be able to use any model to get all of the data we need to display. So,
in the model package, create a Model interface that has a DataModel getDataModel() method.

3. Create a FakeModel class that implements Model in the model package. We're going to need this in the initial stage.
Give it a DataModel dataModel field, and initialize it with the object.

4. Create a void loadUsers() method in the Model interface.
Implement it in FakeModel: use arbitrary data to initialize the list of users for dataModel. The data won't affect testing.
I have the following data:
User{name='A', id=1, level=1}
User{name='B', id=2, level=1}
I think you'll remember that all interface methods are public, so there's no need to indicate a modifier.
Programmers often use fake data in early development. They implement code to get real data in the final stages.
The hardcoded fake data replaces real objects.


Requirements:
1.	A DataModel class must be created in the model package.
2.	A private List&lt;User&gt; users field, along with a corresponding getter and setter, must be created in the DataModel class.
3.	A Model interface must be created inside the model package. A DataModel getDataModel() method must be declared in the Model interface.
4.	A FakeModel class that implements the Model interface must be created inside the model package.
5.	A private DataModel dataModel field must be created and initialized in the FakeModel class.
6.	A void loadUsers() method must be declared in the Model interface.
7.	The void loadUsers() method in the FakeModel class must use some data to initialize the list of users in the dataModel object.


