taskKey="com.codegym.task.task24.task2413.big10"\n\nArkanoid (part 10)


What are we going to do with Canvas?
We'll draw on it (on its matrix).
Therefore, we need two methods:
void setPoint(double x, double y, char c)
void drawMatrix(double x, double y, int[][] matrix, char c)

The first method (setPoint) will "set a point with coordinates (x, y) to color c".
In this method, you need to:
a) round x and y to integers
b) set matrix[y][x] to c
c) do nothing if x < 0 or y < 0 or y > matrix.length or x > matrix[0].length

The second method (drawMatrix) copies the passed image (matrix) to the Canvas matrix.
And it doesn't simply copy image, but rather it starts from coordinates (x, y)
In this method, you need to:
a) use two nested loops to go through all the "pixels" of the passed image
b) if the value of element [i][j] of the passed matrix is ​​not 0, then paint point (x+j, y+i) the color c in the Canvas object's matrix:
setPoint(x + j, y + i, c)



Requirements:
1.	A void setPoint(double x, double y, char c) method must be created in the Canvas class.
2.	A void drawMatrix(double x, double y, int[][] matrix, char c) method must be created in the Canvas class.
3.	The setPoint method&#39;s behavior must match the task conditions.
4.	The drawMatrix method&#39;s behavior must match the task conditions.


Arkanoid (part 9)


Now let's tackle the Canvas class.
It will contain a matrix (two-dimensional array) that we will "draw" on.
The matrix has a width and height.
And we'll use it to store characters (chars) rather than numbers (ints).

Here's what we need:
a) Add two private width and height fields to the class.
b) Add a private char[][] matrix field to the class.
c) Add a constructor with two int parameters (width and height). The matrix field must be initialized with an empty [height+2][width+2] array.
d) Add getters and setters for all of the class's private fields.




Arkanoid (part 8)


But there's more.
The BaseObject class needs more methods.
For now, these will be empty draw(Canvas canvas) and move() methods.
Subclasses will have to override them and implement the necessary functionality (you can leave them empty for now—we just need the code to compile).
Declare these methods, but make them abstract.
Also, make the BaseObject class itself abstract.

And we'll need to determine whether the ball hit a brick or the paddle.
This is how we'll do that:
In this same class, we'll create a special method: boolean intersects(BaseObject o)
It will determine whether objects intersect. If they intersect, return true; if not, false.

Because we're treating objects as circles for convenience, I propose the following collision-detection algorithm:
If the center of the circle of one object lies within the circle of another, then we'll conclude that they've collided.
Or to put it more simply:
distance_between_objects <= max(radius_of_the_first_object, radius_of_the_second_object)



Arkanoid (part 7)


Now let's move on to the BaseObject class.
I want to make some suggestions.

Firstly, for simplicity, we'll treat all objects as circles.
We'll draw them as shapes, just as before.
But when calculating object collisions, we'll assume they are round.
Doing it this way is much simpler.

Second. Let the objects' coordinates and radius be real numbers.
This will ensure smooth motion and accurate calculations.
And we'll round them when drawing.

Let's begin:
a) Add private double x, double y, and double radius fields to the BaseObject class.
b) Add getters and setters.
c) Add a BaseObject(double x, double y, double radius) constructor.
d) Go through all the subclasses and fix their constructors.

If you use IntelliJ IDEA, Alt+Insert will help you.



Arkanoid (part 6)


We will have bricks, a ball, and a paddle, and they'll have a lot in common.
They will move about the field and be drawn on the screen.
That means that they'll all have coordinates and a size.
And a move() method for moving and a draw() method for drawing them on the screen.

Here's an interesting suggestion: let's make one base class for all the objects.
Let this be the BaseObject class.
And the Ball, Paddle, and Brick classes will inherit it.

Create a BaseObject class and add it as the parent of the Ball, Paddle, and Brick classes.

We also need a Canvas class.
It will be responsible for drawing the objects.
Objects will draw themselves using it.
Or more precisely, they'll draw themselves on it, but I'll give you those details later.

Create this class as well.



Arkanoid (part 5)


What else is the Arkanoid class missing?
First, it needs a run() method, where we'll define the main logic of the program.
It also needs a move() method, which will move by one step all objects that need to be moved.
Create the run() and move() methods.

We also need a NON-private static Arkanoid game variable, which will store a reference
to the created Arkanoid object.
It should look something like this:
static Arkanoid game;



