taskKey="com.codegym.task.task24.task2413.big12"\n\nArkanoid (part 12)


Now let's tackle the Brick class.

First, in the constructor we will set the exact "radius" of all the bricks.
Let's do it like this:
public Brick(double x, double y) {
super(x, y, 3);
}

Also be sure that the Brick class has two overridden methods: move() and draw(Canvas canvas).
The move() method does nothing (it contains no code), because a brick doesn't move anywhere.

I'll handle the draw(Canvas canvas) method's code myself.


Requirements:
1.	The Brick constructor must have two double parameters and call the parent class&#39;s constructor with a constant third argument (radius) equal to 3.
2.	The Brick class should have a move method without parameters.
3.	There must be a draw method with one Canvas parameter in the Brick class.


Arkanoid (part 11)


Canvas needs another two methods. Write them.
a) the clear() method
This method will clear the matrix so it can be drawn on again.
You can just re-initialize the matrix with an empty array of the correct dimensions.

b) the print() method
This method draws the matrix on the screen.
You should be able to figure this out on your own: Displaying a set of characters is not so difficult.



Arkanoid (part 10)


What are we going to do with Canvas?
We'll draw on it (on its matrix).
Therefore, we need two methods:
void setPoint(double x, double y, char c)
void drawMatrix(double x, double y, int[][] matrix, char c)

The first method (setPoint) will "set a point with coordinates (x, y) to color c".
In this method, you need to:
a) round x and y to integers
b) set matrix[y][x] to c
c) do nothing if x < 0 or y < 0 or y > matrix.length or x > matrix[0].length

The second method (drawMatrix) copies the passed image (matrix) to the Canvas matrix.
And it doesn't simply copy image, but rather it starts from coordinates (x, y)
In this method, you need to:
a) use two nested loops to go through all the "pixels" of the passed image
b) if the value of element [i][j] of the passed matrix is ​​not 0, then paint point (x+j, y+i) the color c in the Canvas object's matrix:
setPoint(x + j, y + i, c)




Arkanoid (part 9)


Now let's tackle the Canvas class.
It will contain a matrix (two-dimensional array) that we will "draw" on.
The matrix has a width and height.
And we'll use it to store characters (chars) rather than numbers (ints).

Here's what we need:
a) Add two private width and height fields to the class.
b) Add a private char[][] matrix field to the class.
c) Add a constructor with two int parameters (width and height). The matrix field must be initialized with an empty [height+2][width+2] array.
d) Add getters and setters for all of the class's private fields.




Arkanoid (part 8)


But there's more.
The BaseObject class needs more methods.
For now, these will be empty draw(Canvas canvas) and move() methods.
Subclasses will have to override them and implement the necessary functionality (you can leave them empty for now—we just need the code to compile).
Declare these methods, but make them abstract.
Also, make the BaseObject class itself abstract.

And we'll need to determine whether the ball hit a brick or the paddle.
This is how we'll do that:
In this same class, we'll create a special method: boolean intersects(BaseObject o)
It will determine whether objects intersect. If they intersect, return true; if not, false.

Because we're treating objects as circles for convenience, I propose the following collision-detection algorithm:
If the center of the circle of one object lies within the circle of another, then we'll conclude that they've collided.
Or to put it more simply:
distance_between_objects <= max(radius_of_the_first_object, radius_of_the_second_object)



Arkanoid (part 7)


Now let's move on to the BaseObject class.
I want to make some suggestions.

Firstly, for simplicity, we'll treat all objects as circles.
We'll draw them as shapes, just as before.
But when calculating object collisions, we'll assume they are round.
Doing it this way is much simpler.

Second. Let the objects' coordinates and radius be real numbers.
This will ensure smooth motion and accurate calculations.
And we'll round them when drawing.

Let's begin:
a) Add private double x, double y, and double radius fields to the BaseObject class.
b) Add getters and setters.
c) Add a BaseObject(double x, double y, double radius) constructor.
d) Go through all the subclasses and fix their constructors.

If you use IntelliJ IDEA, Alt+Insert will help you.



