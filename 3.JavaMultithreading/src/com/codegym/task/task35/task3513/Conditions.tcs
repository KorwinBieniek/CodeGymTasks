taskKey="com.codegym.task.task35.task3513.big04"\n\n2048 (part 4)


The game 2048 begins on a board where two tiles already have initial values. But our board is still empty :(.
Before you rush to write code, let's think about how this could be implemented.

I suggest creating a private addTile method that will look at which tiles are empty. And if there are empty tiles, it will change the weight of one of them,
chosen at random, to 2 or 4 (there should be 1 four for every 9 twos). To get a random item from the list,
you can use the following expression: (list size * random number between zero and one).
You can also get empty tiles using a separate private getEmptyTiles method that returns a list
of the empty tiles in the gameTiles array.

After implementing the functionality for adding new tiles, add two addTile method calls to the constructor
to satisfy the task's starting condition.

P.S. Perhaps it would be worth it to move all the code from the constructor to a resetGameTiles method so that
starting a new game doesn't require creating a new model. You could instead simply return to the initial state
by calling this method. The access level should be wider than private.
P.P.S. To calculate the weight of a new tile, use the expression (Math.random () < 0.9 ? 2 : 4).


Requirements:
1.	The getEmptyTiles method should return a list of the empty tiles in the gameTiles array.
2.	The addTile method should change the value of a random empty tile in the gameTiles array to 2 or 4 with a probability of 0.9 and 0.1, respectively.
3.	The resetGameTiles method should populate the gameTiles array with new tiles and change the value of two of them with two calls to the addTile method.
4.	The Model class constructor must call the resetGameTiles method.


2048 (part 3)


Let's implement the Model class. It will be responsible for all manipulations performed on the game board.

But to manipulate the game board, we ought to start by creating it!

We're going to need:
1. A private constant FIELD_WIDTH = 4, which defines the width of the game board.
2. A private two-dimensional gameTiles array consisting of Tile objects.
3. A constructor without parameters that initializes the game board and populates it with empty tiles.



2048 (part 2)


In the game 2048 game, the board consists of 16 tiles, each of which has a certain weight.
In addition to weight, a tile has its own color and text color used to display the tile's weight.
Tile colors range from light gray to red, and the text color depends on the color of the tile.

Create a Tile class that will describe a single tile.
It will need the following:
1. An int value field with default access.
2. A constructor with a parameter that initializes the value field.
3. A constructor without parameters (initializes the value field to zero).
4. An isEmpty method that returns true if the value field is 0, otherwise false.
5. A getFontColor method that returns a new Color object (0x776e65)
if the tile weight is less than 16, otherwise 0xf9f6f2.
6. The getTileColor method, which returns the color of a tile depending on its weight, according to the
following values:
0:    (0xcdc1b4);
2:    (0xeee4da);
4:    (0xede0c8);
8:    (0xf2b179);
16:   (0xf59563);
32:   (0xf67c5f);
64:   (0xf65e3b);
128:  (0xedcf72);
256:  (0xedcc61);
512:  (0xedc850);
1024: (0xedc53f);
2048: (0xedc22e);

for any other values: (0xff0000).

The methods listed above should not be private.



2048 (part 1)


Hi! I hope you've grown tired of ordinary tasks and are eagerly anticipating a big one!
Today we'll write a Java implementation of the game 2048. In short, if you haven't heard anything about this game, the goal is
to get a tile with a value of 2048 on a 4x4 board. You can read more on Wikipedia:
https://en.wikipedia.org/wiki/2048_(video_game)

To begin, we're going to need the following classes:
1. Controller - It will monitor keystrokes during the game.
2. Model - It will contain the game logic and store the game board.
3. View - It will provide a view of the current state of the game.
4. Main - It will contain only the main method, serving as the entry point for our application.

Create them!



