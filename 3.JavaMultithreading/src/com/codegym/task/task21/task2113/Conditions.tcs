taskKey="com.codegym.task.task21.task2113.big13"\n\nHippodrome (part 13)


Now we'll return to the Horse class's print method.
Because we're working with the console, then all the racing horses will look something like this:
........Slevin
....Lucky
..........Homer

In other words, the print method should display a string consisting of dots and the horse's name.
The number of dots is equal to distance, rounded down to an integer.


Requirements:
1.	The print method should display a string consisting of dots and the horse&#39;s name. The number of dots is equal to the integer part of the distance.


Hippodrome (part 12)


There's just a little left to do: finish writing the Horse class.
The move method is called each time a horse takes a step.
When the move method is called on a horse, the horse must run a certain distance.
The distance depends on the horse's speed. In its simplest form, this method would look something like this:
distance += speed;

But to make it more interesting, let's make the speed change a little bit all the time.
To achieve this, multiply the speed by a random number.
A random number can be obtained using the Math.random() method.



Hippodrome (part 11)


We're almost done with the Hippodrome class.
Add a call to run() at the end of the main method.

Hint:
The run() method is not static, so you can only call it on an object.
But where do you get the object?

Hint 2:
game.run();



Hippodrome (part 10)


We still need to write the Hippodrome class's print method.
Everything is simple here, too: In a loop, we call the print method on each horse.
Oh, and display 10 empty lines after the loop (using System.out.println()) to make it more beautiful.



Hippodrome (part 9)


Now let's return to the move and print methods. Let's start with move.
In the Hippodrome class's move method, we call the move method on each horse in the loop.

Yes, you're right: the Horse class doesn't have it yet.
This means you need to add your own move method to the Horse class. :)
Oh, and the print method, too.
If I don't say anything about a method's parameters, then the method doesn't have any parameters.
Make all of the methods public unless indicated otherwise.




Hippodrome (part 8)


Make a loop from 1 to 100 in the run method. This will be our race.
In the body of the loop, we'll call move first, then print.
To prevent the whole loop from finishing in a split second, add Thread.sleep(200); as well.



