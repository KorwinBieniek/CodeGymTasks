taskKey="com.codegym.task.task27.task2712.big11"\n\nRestaurant (part 11)


We've implemented the first two of the three features. You will recall that the first was automated order preparation,
the second was commercial selection, and the third is statistics for the manager. And that's our next step.

We need to implement the following functionality:
1) calculate the statistics
2) display the statistics to the manager

Let's try to determine the sequence of actions. To display data, you must first get it from somewhere.

There are two approaches:
The FIRST approach is applied when it is difficult to obtain real data, or when someone else does the work to get the data:
1. hardcode the data in the application
2. display the hardcoded statistics
3. get the real data/statistics (integrate with someone else's code)

SECOND:
1. get the real data/statistics
2. display the statistics

Because we're implementing this functionality ourselves, and the statistics aren't complicated, we'll adopt the second approach.
Let's start by getting the real data and real statistics.

Here's the idea:
There's an event repository.
When an event occurs, we'll record it in the repository.
Upon a request from the manager, we'll filter the events in the repository, and then calculate and display the necessary data.

First, we need several classes.
1. Create a statistics package, where we'll create a StatisticsManager class. We'll use it to record events in the repository.
2. We should have one repository with one entry point. Therefore, we'll make StatisticsManager a singleton.
3. Inside the statistics package, create a nested event package to store event-related classes.
4. Create an EventDataRow interface in the event package. At the moment, it's a marker interface,
since it doesn't have methods and we use it to determine whether the passed object is an event.
5. In StatisticsManager, create a public void record(EventDataRow data) method that records the event in the repository.
We'll return to the implementation later.


Requirements:
1.	The StatisticsManager class in the statistics package must be a singleton.
2.	The StatisticsManager class must have a public void record method with one EventDataRow parameter.
3.	A public static getInstance method must be created in the StatisticsManager class.
4.	The statistics package must contain an event package that contains an EventDataRow marker interface.


Restaurant (part 10)


Recursion is used when the algorithm for solving the problem is the same as the algorithm for solving part of the problem.
That's just what we have. We need to do a full search of all options and choose the best of them.

Let me remind you of the pattern used to write recursive code:
a) condition for terminating the recursion
b) condition for continuing the recursion (recursive call with a set of parameters from the previous step).
You can always find detailed information online about how to write recursion.

Our current task is to provide a recursive implementation of item 2.2 of the previous task:
(choose a list of available videos that maximizes revenues)
The recursive method must chose the set of commercials that will be displayed to the customer.

This set must meet the following requirements:
1) the amount of money received from impressions should be the maximum of all possible options
2) the total commercial playback time must NOT exceed the cooking time for the current order;
3) a video is shown no more than once for any given order;
4) if several different sets of videos will produce the same amount of money from impressions, then:
4.1) choose the option that maximizes the total time;
4.2) if the total time is the same for multiple such options, then select the option with the smallest number of videos;
5) the number of remaining impressions of any commercial in the set must be positive.

And don't forget to implement item 2.4 of the previous task (display all the relevant videos).

The revalidate() method must be called for each video shown.



Restaurant (part 9)


We need an exception that will help us handle the situation where we are unable to choose commercials.

1. Create an unchecked NoVideoAvailableException in the ad package.

2. Let's take a closer look at the void processVideos() method in AdvertisementManager.
2.1. Remove the code that displays "calling the processVideos method"
The method should:
2.2. Choose a list of available videos that maximizes revenues. (Don't do this yet—we'll do it later).
2.3. If there are no advertising videos that can be shown to the customer, then throw a NoVideoAvailableException,
which you will need to catch (think about where the best place to do this would be), and log the following phrase with logging level Level.INFO
"No video is available for the following order: " + order
2.4. Display all the chosen commercials in order of decreasing cost per impression
in cents. The secondary sort order is by increasing the cost per impression per second of commercial in thousandths of a cent
Use the Collections.sort method
(Again, don't do this yet—we'll do it later).
Example for [Water]:
Displaying First Video... 50, 277
where "First Video" is the name of the commercial
where 50 is the cost per impression in cents
where 277 is the cost per impression per second of commercial in thousandths of a cent (equal to 0.277 cents)
Use the methods of the Advertisement class.
2.5. In the Advertisement class, create a void revalidate() method. This method should:
2.5.1. Throw an UnsupportedOperationException if the number of impressions is not positive.
2.5.2. Decrement the number of remaining impressions.



Restaurant (part 8)


It's time to describe the functionality of the AdvertisementManager class.
But first we're going to need some methods in the Advertisement class.

1. Create a long amountPerImpression field in the Advertisement class.
It should equal the cost of one ad impression in cents (amountPaid / impressionsRemaining).
Assign a value to the field in the constructor.

2. In the Advertisement class, create getters for the name, duration, and amountPerImpression fields.

3. Determine what data the AdvertisementManager object needs, i.e. the time required for the cook to prepare an order.
Because we're storing the duration of the videos in seconds, we'll also take the cooking time in seconds.
In the AdvertisementManager class, create a constructor that has one parameter: int timeSeconds.
Create a corresponding field and save this value in it.

4. AdvertisementManager performs just one action—it processes ad videos.
Therefore, create the only public method: void processVideos(). Its functionality will be described in the next task.
But for now, display "calling the processVideos method"

5. To test this functionality, you need to add a call to the processVideos method to the AdvertisementManager.
Obviously, this method should be called during creation of an order, or more precisely—in parallel with the creation of an order.
The order is prepared while the video is watched.
Add a call to the processVideos() method in the right place.

P.S. Don't forget that an order's preparation time is recorded in minutes, but the time of an ad impression in measured in seconds!



Restaurant (part 7)


When choosing which class to start from, try to find one that is used by others, and which does not use anything.
In our case, this is the repository of advertising videos (AdvertisementStorage).
We decided that it would be the only one in the restaurant and made it a singleton.
Let's describe it.

1. The videos need to be stored somewhere. Let's make it a list.
Create a videos field and initialize it with an empty list.
Think about whether the videos field should be able to change its value?

2. To make it possible to work with the videos, create the following public methods:
2.1. list() - returns a list of all available videos.
2.2. add(Advertisement advertisement) - adds a new video to the videos list.

3. In the class constructor, let's add some data to the videos list. This is what I have:
Object someContent = new Object();
new Advertisement(someContent, "First Video", 5000, 100, 3 * 60) // 3 min
new Advertisement(someContent, "Second Video", 100, 10, 15 * 60) // 15 min
new Advertisement(someContent, "Third Video", 400, 2, 10 * 60)   // 10 min

4. In the AdvertisementManager class, we'll create a final field that references an instance of AdvertisementStorage and call it storage.
Don't forget to initialize this field!



Restaurant (part 6)


An order is created, prepared by the cook, and then carried out to the guest. We also calculate the time required to fill the order.
We'll consider the first part of the task complete.
Let's move on to the second: while the order is being prepared, ads should be shown on the tablet.
Let's define what we mean by ads.

For us, an ad is a video of a certain duration. We also know that someone has paid for a number of impressions.
We'll assume that we know the number of paid impressions, the total cost of all impressions, and the ad itself.

1. Create an ad package for ad-related functionality.

2. In the ad package, create an Advertisement class that has the following fields:
Object content - the video
String name - the name or title
long amountPaid - the amount paid for ads in cents. Use a long to avoid rounding problems
int impressionsRemaining - the number of impressions that have been paid for but not shown
int duration - the duration in seconds
Set the access modifiers on your own.

3. In the Advertisement class, create a constructor with parameters ordered according to the sequence of fields listed above

4. We'll create another two classes in the same package:
AdvertisementStorage - a repository of commercials.
AdvertisementManager - each tablet will have its own manager object
that will select and sequence the optimal set of videos for each order.
It will also interact with the player and display the videos.

5. Since there is only one AdvertisementStorage for the entire restaurant, we'll make it a singleton.



