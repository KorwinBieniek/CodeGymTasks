taskKey="com.codegym.task.task32.task3209.big15"\n\nHTML Editor (part 15)


Add a resetDocument() method to the controller. It should reset the current document. It must:
15.1.	Remove the undo/redo edit listener from the current document (find the appropriate method
inherited from AbstractDocument). You need to ask the view for the listener (getUndoListener() method).
Don't forget to verify that the current document exists (is not null).
15.2.	Create a new default document and assign it to the document field.
Hint: use an appropriate method from the HTMLEditorKit class.
15.3.	Add an edit listener to the new document.
15.4.	Call the view's update() method.


Requirements:
1.	The Controller class must contain a public resetDocument() method that resets the current document.
2.	The resetDocument() method should use the removeUndoableEditListener() method to remove the edit listener from the current document.
3.	The resetDocument() method should create a new default document using the createDefaultDocument() method.
4.	The resetDocument() method must use the addUndoableEditListener() method to add an edit listener to the new document.
5.	The resetDocument() method should call the update() method on the view.


HTML Editor (part 14)


14.1.	Add a selectHtmlTab() method to the view class. It must:
14.1.1.	Select the HTML tab (switch to it).
14.1.2.	Reset all edits using the method you previously implemented.
14.2.	Add a getter for the model to the controller class. In our case, this is the document field.
14.3.	Add an update() method to the view. It should get the document from
the controller and set it on htmlTextPane.
14.4.	Add a showAbout() method to the view. It should show a dialog
box with information about the program. Think up the information on your own, but message type
must be JOptionPane.INFORMATION_MESSAGE.



HTML Editor (part 13)


Let's implement the TextEditMenuListener class in the listeners package. This class will work like
the UndoMenuListener class, but for other menu items. The menu items responsible for
style, font, color, etc. should only be available when the first tab is selected
in our editor.
13.1.	Add a boolean isHtmlTabSelected() method to the view. It must return
true if the tab that displays HTML is selected in the tabbed pane (hint: its index is 0).
13.2.	Add a View field to the TextEditMenuListener class. Initialize it in the class
constructor.
13.3.	In the TextEditMenuListener class, override the menuSelected(MenuEvent
menuEvent) method. It must:
13.3.1.	Use the parameter to get the object that the action was performed on. In
our case, this will be a JMenu object.
13.3.2.	Get a list of components (menu items) from this menu.
13.3.3.	For each menu item, call the setEnabled method, passing the return value of
the view's isHtmlTabSelected() method as an argument.
Run the application and be sure that the style, align, color and font menu items are available
only when the HTML tab is active, not when the Text tab is active.



HTML Editor (part 12)


12.1.	Implement the RedoAction class:
12.1.1.	Add a View field to the class. Add its initialization in the constructor.
12.1.2.	Implement the actionPerformed(ActionEvent actionEvent) method. It should call the
redo() method on the view.
12.2.	Implement the UndoAction class by analogy with RedoAction.
12.3.	Study the implementation of the StrikethroughAction class that you received along with the task, and
implement the following classes in the same way:
12.3.1.	SubscriptAction
12.3.2.	SuperscriptAction
Run the program and be sure that the Subscript, Superscript, and Strikethrough
menu items work. The menu items responsible for undo and redo aren't yet connected
to the controller and we can't check them.



HTML Editor (part 11)


11.1.	Add an UndoManager undoManager field to the view. Figure out what
this class is used for. Initialize the field with a new object.
11.2.	In the listeners package, add an UndoListener class that implements the
UndoableEditListener interface. This class will listen for edits that can undone or redone.
11.3.	Add the following to the UndoListener class:
11.3.1.	An UndoManager undoManager field.
11.3.2.	A constructor that takes an UndoManager and initializes the corresponding field.
11.3.3.	An undoableEditHappened(undoableEditEvent e) method. It should get the edit from
the passed event and add it to undoManager.
11.4.	Add an UndoListener undoListener field to the view, and initialize it
using undoManager.
11.5.	Add the following methods to the view:
11.5.1. void undo() - This method undoes the last action. Implement it using undoManager.
The method must not throw exceptions. It should only log them.
11.5.2. void redo() - This method returns the previously undone action. Implement it by analogy with
the previous step.
11.5.3.	Implement boolean canUndo() and boolean canRedo() methods using undoManager.
11.5.4.	Implement a getter for undoListener.
11.5.5.	Add and implement a void resetUndo() method that clears all edits in
undoManager.



HTML Editor (part 10)


Our editor will support undo/redo of actions
performed in the editor.
Implement the UndoMenuListener class. This listener will listen to the menu, or more accurately,
it will listen for the moment when the edit menu is selected by the user. At that moment, it
will ask the view if we can currently undo or redo an
action. The answer determines whether we should make the "Undo" and "Redo" menu items
available.
10.1.	Add the following fields to the UndoMenuListener class:
10.1.1.	View view.
10.1.2.	JMenuItem undoMenuItem.
10.1.3.	JMenuItem redoMenuItem.
10.2.	Implement an UndoMenuListener(View view, JMenuItem undoMenuItem,
JMenuItem redoMenuItem) constructor. It should initialize the fields of the class.
10.3.	Implement a menuSelected(MenuEvent menuEvent) method. It will be called before
the menu is shown. It must:
10.3.1.	Ask the view whether we can undo an action using the
boolean canUndo() method. The view doesn't have such a method yet, so add a stub
that always returns false.
10.3.2.	Make the undoMenuItem available depending on what the view returns to us.
Hint: use the setEnabled() method.
10.3.3.	Take similar actions for redoMenuItem, adding a
canRedo() stub method to the view.
Run the program and make sure that the Undo and Redo menu items are not available.



