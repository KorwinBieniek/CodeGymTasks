taskKey="com.codegym.task.task32.task3209.big22"\n\nHTML Editor (part 22)


In the controller, let's implement the saveDocumentAs() method for saving the file under a new name.
The implementation should:
22.1.	Switch the view to the HTML tab.
22.2.	Create a new JFileChooser object.
22.3.	Set an HTMLFileFilter object as its filter.
22.4.	Show the "Save File" file chooser dialog.
22.5.	If the user confirms the file selection:
22.5.1.	Save the selected file in the currentFile field.
22.5.2.	Set the file name as the window title on the view.
22.5.3.	Create a FileWriter based on currentFile.
22.5.4.	Copy the data from document to the FileWriter object by analogy with what
we did in the getPlainText() method.
22.6.	The method must not throw exceptions.
Check the Save as... menu item.


Requirements:
1.	The saveDocumentAs() method in the controller should switch the view to the HTML tab.
2.	The saveDocumentAs() method in the controller should create a new JFileChooser object.
3.	The saveDocumentAs() method in the controller should set an HTMLFileFilter object as the filter on the JFileChooser object.
4.	The saveDocumentAs() method in the controller should use the JFileChooser.showSaveDialog() method to show the &quot;Save File&quot; file chooser dialog.
5.	The saveDocumentAs() method in the controller should save the selected file in the currentFile field if the user confirms the file selection.
6.	The saveDocumentAs() method in the controller should set the file name as the window title on the view if the user confirms the file selection.
7.	The saveDocumentAs() method in the controller should create a FileWriter based on currentFile if the user confirms the file selection.
8.	The saveDocumentAs() method in the controller should use HTMLEditorKit to copy the data from document to the FileWriter object if the user confirms the file selection.
9.	The saveDocumentAs() method in the controller should not throw exceptions. It should only log them using ExceptionHandler.


HTML Editor (part 21)


To open and save the file, we'll use JFileChooser from the swing library.
Objects of this type support filters that inherit FileFilter. Now we'll write
our own filter:
21.1.	Create a public HTMLFileFilter class that inherits FileFilter.
21.2.	We want the file selection window to display only folders and HTML/HTM files.
Override the accept(File f) method so that it returns true if the passed file is a
directory or its name ends with ".html" or ".htm" (case insensitive).
21.3.	To make the description of available file types in the file selection window
"HTML and HTM files", override the getDescription() method accordingly.



HTML Editor (part 20)


20.1.	Implement the createNewDocument() method in the controller. It
must:
20.1.1.	Select the HTML tab on the view.
20.1.2.	Reset the current document.
20.1.3.	Set a new window title, e.g. "HTML editor". Use the
setTitle() method, which is inherited by our view.
20.1.4.	Reset the edits in the undo manager. Use the view's resetUndo method.
20.1.5. Set currentFile to null.
20.2.	Implement the controller's init() method. It should just call the method
that creates a new document.
Check that the New menu item works.



HTML Editor (part 19)


Implement the actionPerformed(ActionEvent actionEvent) method on the view. This method is
inherited from the ActionListener interface and will be called upon selection of menu items
that our view has been added to as an event listener.
19.1.	Get a command from the event using the getActionCommand() method(). It will
be an ordinary string. You can use this string to understand which menu item created this
event.
19.2.	If it is the "New" command, call the controller's createNewDocument() method. From here on,
if the controller doesn't have the required method yet, create a stub.
19.3.	If it is the "Open" command, call the openDocument() method.
19.4.	If "Save", then call saveDocument().
19.5.	If "Save as...", saveDocumentAs().
19.6.	If "Exit", exit().
19.7.	If "About", then call the showAbout() method on the view.
Check that the Exit and About menu items now work.



HTML Editor (part 18)


Implement the view's selectedTabChanged() method. This method is called when the selected
tab changes. Let's begin:
18.1.	The method should check which tab is currently selected.
18.2.	If the tab with index 0 is selected (HTML tab), then we need to get the text from
plainTextPane and set it on the controller using the setPlainText method.
18.3.	If the tab with index 1 is selected (the tab with HTML code), then you need to get
the text from the controller using the getPlainText() method and set it on
plainTextPane.
18.4.	Reset the edits (call the view's resetUndo method).



HTML Editor (part 17)


Add a String getPlainText() method to the controller. It should get text from the document with
all the HTML tags.
17.1.	Create a StringWriter object.
17.2.	Copy all of the document's contents to the created object using
the HTMLEditorKit class's write method.
17.3.	As usual, the method must not throw exceptions.



