taskKey="com.codegym.task.task32.task3209.big20"\n\nHTML Editor (part 20)


20.1.	Implement the createNewDocument() method in the controller. It
must:
20.1.1.	Select the HTML tab on the view.
20.1.2.	Reset the current document.
20.1.3.	Set a new window title, e.g. "HTML editor". Use the
setTitle() method, which is inherited by our view.
20.1.4.	Reset the edits in the undo manager. Use the view's resetUndo method.
20.1.5. Set currentFile to null.
20.2.	Implement the controller's init() method. It should just call the method
that creates a new document.
Check that the New menu item works.


Requirements:
1.	The createNewDocument() method in the controller should select the HTML tab on the view.
2.	The createNewDocument() method in the controller should reset the current document.
3.	The createNewDocument() method in the controller should set a new window title.
4.	The createNewDocument() method in the controller should reset the edits in the undo manager.
5.	The createNewDocument() method in the controller should set currentFile to null.
6.	The init() method in the controller should call the method that creates a new document.


HTML Editor (part 19)


Implement the actionPerformed(ActionEvent actionEvent) method on the view. This method is
inherited from the ActionListener interface and will be called upon selection of menu items
that our view has been added to as an event listener.
19.1.	Get a command from the event using the getActionCommand() method(). It will
be an ordinary string. You can use this string to understand which menu item created this
event.
19.2.	If it is the "New" command, call the controller's createNewDocument() method. From here on,
if the controller doesn't have the required method yet, create a stub.
19.3.	If it is the "Open" command, call the openDocument() method.
19.4.	If "Save", then call saveDocument().
19.5.	If "Save as...", saveDocumentAs().
19.6.	If "Exit", exit().
19.7.	If "About", then call the showAbout() method on the view.
Check that the Exit and About menu items now work.



HTML Editor (part 18)


Implement the view's selectedTabChanged() method. This method is called when the selected
tab changes. Let's begin:
18.1.	The method should check which tab is currently selected.
18.2.	If the tab with index 0 is selected (HTML tab), then we need to get the text from
plainTextPane and set it on the controller using the setPlainText method.
18.3.	If the tab with index 1 is selected (the tab with HTML code), then you need to get
the text from the controller using the getPlainText() method and set it on
plainTextPane.
18.4.	Reset the edits (call the view's resetUndo method).



HTML Editor (part 17)


Add a String getPlainText() method to the controller. It should get text from the document with
all the HTML tags.
17.1.	Create a StringWriter object.
17.2.	Copy all of the document's contents to the created object using
the HTMLEditorKit class's write method.
17.3.	As usual, the method must not throw exceptions.



HTML Editor (part 16)


Add a setPlainText(String text) method to the controller. It will write the passed text with
HTML tags to document. Implement it as follows:
16.1.	Reset the document.
16.2.	Create a new StringReader based on the passed text.
16.3.	Call the read() method in the HTMLEditorKit class. It reads data from the reader into
the document field.
16.4.	Be sure that the method does not throw exceptions. They just need to be logged.



HTML Editor (part 15)


Add a resetDocument() method to the controller. It should reset the current document. It must:
15.1.	Remove the undo/redo edit listener from the current document (find the appropriate method
inherited from AbstractDocument). You need to ask the view for the listener (getUndoListener() method).
Don't forget to verify that the current document exists (is not null).
15.2.	Create a new default document and assign it to the document field.
Hint: use an appropriate method from the HTMLEditorKit class.
15.3.	Add an edit listener to the new document.
15.4.	Call the view's update() method.



