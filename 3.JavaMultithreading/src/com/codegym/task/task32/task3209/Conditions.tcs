taskKey="com.codegym.task.task32.task3209.big08"\n\nHTML Editor (part 8)


It's time to add all the necessary menu items and write classes for the actions
that are performed when the menu items are selected. This is quite time-consuming, routine work. You're a great
student and we wouldn't want to upset you. So, as a bonus, you're getting a ready-made
MenuHelper class! Here's what you need to do:
8.1.	In the actions package, write stubs for the following classes:
8.1.1.	UndoAction. It must inherit AbstractAction and
have an UndoAction(View view) constructor.
8.1.2.	RedoAction. The requirements are similar to those for
UndoAction.
8.1.3.	StrikethroughAction class, which is responsible for the strikethrough text style. Make it inherit
StyledEditorKit.StyledTextAction.
8.1.4.	SubscriptAction class, which is responsible for the subscript text style. It should
also inherit StyledEditorKit.StyledTextAction.
8.1.5.	SuperscriptAction. It will be responsible for the superscript style. Give it
the appropriate parent class.
8.2.	In the listeners package, write stubs for the following classes:
8.2.1.	UndoMenuListener. It should implement the MenuListener interface and have
an UndoMenuListener(View view, JMenuItem undoMenuItem, JMenuItem
redoMenuItem) constructor. You find out what it will be responsible for a little later.
8.2.2.	TextEditMenuListener. This class must also implement the MenuListener interface.
Add a TextEditMenuListener(View view) constructor to it. In subsequent tasks, we'll
take a more detailed look at it.


Requirements:
1.	The UndoAction class must be in a separate file.
2.	The RedoAction class must be in a separate file.
3.	The StrikethroughAction class must be in a separate file.
4.	The SubscriptAction class must be in a separate file.
5.	The SuperscriptAction class must be in a separate file.
6.	The UndoMenuListener class must be in a separate file.
7.	The TextEditMenuListener class must be in a separate file.


HTML Editor (part 7)


Add a MenuHelper class. This will be a helper class for initializing and configuring
the menu. The menu will have the following structure:
- File
-- New
-- Open
-- Save
-- Save as...
-- Exit

- Edit
-- Undo
-- Redo
-- Cut
-- Copy
-- Paste

- Style
-- Bold
-- Underline
-- Italic
-- Subscript
-- Superscript
-- Strikethrough

- Align
-- Left
-- Center
-- Right

- Color
-- Red
-- Orange
-- Yellow
-- Green
-- Blue
-- Cyan
-- Magenta
-- Black

- Font
-- Font
--- SansSerif, Serif, Monospaced, Dialog, DialogInput,
-- Font size
--- 6, 8, 10, 12, 14, 16, 20, 24, 32, 36, 48, 72

- Help
-- About

7.1.	In MenuHelper, implement a static JMenuItem addMenuItem(JMenu parent, String
text, ActionListener actionListener) method, where parent is the menu that we're adding the item to, text is
the text of the item being added, and actionListener is the action listener of the added
menu item. It must:
7.1.1.	Use the text parameter to create a new JMenuItem.
7.1.2.	Using the addActionListener() method to set an action listener on this item.
7.1.3.	Add the created menu item to parent.
7.1.4.	Return the created menu item.
7.2.	Implement a static JMenuItem addMenuItem(JMenu parent, Action action) method. This
method is similar to the previous one, but it has an action parameter,
which represents the action that must be performed when the menu item is selected. Hint: Pass action
to the constructor when creating a JMenuItem. Figure out where the name of the menu item will come from
if it isn't set separately.
7.3.	Implement a static JMenuItem addMenuItem(JMenu parent, String text, Action
action) method that adds a new menu item with the text and action arguments to parent
when this menu item is selected. In the implementation, call the method in the
previous step.
7.4.	Add stubs for the following static methods to MenuHelper:
7.4.1.	void initHelpMenu(View view, JMenuBar menuBar) - This method initializes the help menu.
7.4.2.	void initFontMenu(View view, JMenuBar menuBar) - This method initializes the
font menu.
7.4.3.	void initColorMenu(View view, JMenuBar menuBar) - This method initializes the color menu.
7.4.4.	void initAlignMenu(View view, JMenuBar menuBar) - This method initializes the
alignment menu.
7.4.5.	void initStyleMenu(View view, JMenuBar menuBar) - This method initializes the
style menu.
7.4.6.	void initEditMenu(View view, JMenuBar menuBar) - This method initializes the
edit menu.
7.4.7.	void initFileMenu(View view, JMenuBar menuBar) - This method initializes the file menu.



HTML Editor (part 6)


Implement the initEditor() method, which initializes the editor panes. It must:
6.1.	Set "text/html" as the content type for the htmlTextPane component.
Find and use the appropriate method.
6.2.	Create a new local JScrollPane component based on htmlTextPane.
6.3.	Add a tab named "HTML" and the component from the previous step
to tabbedPane.
6.4.	Create a new local JScrollPane component based on plainTextPane.
6.5.	Add another tab named "Text" and the component from the previous step
to tabbedPane.
6.6.	Set the preferred pane size on tabbedPane.
6.7.	Create a TabbedPaneChangeListener object and set it as
a change listener on tabbedPane.
6.8.	Add our tabbed pane to the center of the content pane of the current frame.
You can get the current frame's content pane using the getContentPane()
method, which is inherited from JFrame.
Think about which method you need to call and with which arguments for the tabbed pane to be displayed
in the center of the current frame's content pane.
After starting the application, you can see the latest results: two independent
tabs (HTML and Text), and each of them lets you enter your own text.



HTML Editor (part 5)


5.1.	In the listeners package, declare a TabbedPaneChangeListener class that implements the ChangeListener
interface. This class will listen for and handle changes to the state of the tabbed pane.
In this class, implement the following:
5.1.1.	A constructor that has a view parameter and saves
it in the view field.
5.1.2.	Override the method in the ChangeListener interface. It should call the
selectedTabChanged() method on the view. We don't have that last method yet. Make a
stub for it.
5.2.	Declare an ExceptionHandler class. This will be our exception handler,
which you can override in the future. For now, add a static log(Exception e)
method to it. This method will display a short description of the problem on the console
(use the toString method of the passed exception).



HTML Editor (part 4)


4.1.	Declare initMenuBar() and initEditor() methods in the View class. They will be responsible for
initializing the menus and editor panes.
4.2.	Declare an initGui() method in the view. It will initialize the graphical
interface. From this method, call initMenuBar() to initialize the menu, initEditor() to initialize the
editor, and the pack() method, which we inherit from the JFrame class.
Figure out what the pack() method does.
4.3.	Implement the view's init() method. It must:
4.3.1.	Call initGui() to initialize the GUI.
4.3.2.	Add an event listener to our window. Create and use
a FrameListener object as the listener. To add the listener, use the
appropriate method from the Window class, inherited by our class through the
JFrame and Frame classes.
4.3.3.	Show our window. Use the setVisible method with the correct argument.
At this point, when launched, the application should show a window that can be resized,
maximized, closed, etc.



HTML Editor (part 3)


The graphical interface will be a window with a menu and a pane with
two tabs.
The first tab will be a text pane that will render an HTML
page. Here it will be possible to format and edit the text of the page.
The second tab will have an editor that will display the page's HTML code. It will show
all of the HTML tags being used. It will also be possible to change the page's text here,
and add and remove various tags.
3.1.	Add and initialize fields in the view class:
3.1.1.	JTabbedPane tabbedPane - This will be a pane with two tabs.
3.1.2.	JTextPane htmlTextPane - This will be a component for editing the HTML visually.
It will be placed on the first tab.
3.1.3.	JEditorPane plainTextPane - This will be a component for editing HTML as
text. It will display the HTML code (HTML tags and their contents).
3.2.	Add a FrameListener class to the listeners package. It must:
3.2.1.	Inherit WindowAdapter.
3.2.2.	Have a View view field.
3.2.3.	In its constructor, take a View and initialize a field.
3.2.4.	Override the windowClosing(WindowEvent windowEvent) method, which
should call exit() on the view.



