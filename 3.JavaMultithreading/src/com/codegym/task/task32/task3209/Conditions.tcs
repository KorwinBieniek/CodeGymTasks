taskKey="com.codegym.task.task32.task3209.big17"\n\nHTML Editor (part 17)


Add a String getPlainText() method to the controller. It should get text from the document with
all the HTML tags.
17.1.	Create a StringWriter object.
17.2.	Copy all of the document's contents to the created object using
the HTMLEditorKit class's write method.
17.3.	As usual, the method must not throw exceptions.


Requirements:
1.	The Controller class must have a public String getPlainText() method.
2.	A StringWriter object should be created in the getPlainText() method.
3.	The getPlainText() method should call the write() method on the HTMLEditorKit object.
4.	If an exception occurs in the getPlainText() method, the exception must be logged using the ExceptionHandler class&#39;s log method.
5.	The getPlainText() method should return the text from the document with all HTML tags.


HTML Editor (part 16)


Add a setPlainText(String text) method to the controller. It will write the passed text with
HTML tags to document. Implement it as follows:
16.1.	Reset the document.
16.2.	Create a new StringReader based on the passed text.
16.3.	Call the read() method in the HTMLEditorKit class. It reads data from the reader into
the document field.
16.4.	Be sure that the method does not throw exceptions. They just need to be logged.



HTML Editor (part 15)


Add a resetDocument() method to the controller. It should reset the current document. It must:
15.1.	Remove the undo/redo edit listener from the current document (find the appropriate method
inherited from AbstractDocument). You need to ask the view for the listener (getUndoListener() method).
Don't forget to verify that the current document exists (is not null).
15.2.	Create a new default document and assign it to the document field.
Hint: use an appropriate method from the HTMLEditorKit class.
15.3.	Add an edit listener to the new document.
15.4.	Call the view's update() method.



HTML Editor (part 14)


14.1.	Add a selectHtmlTab() method to the view class. It must:
14.1.1.	Select the HTML tab (switch to it).
14.1.2.	Reset all edits using the method you previously implemented.
14.2.	Add a getter for the model to the controller class. In our case, this is the document field.
14.3.	Add an update() method to the view. It should get the document from
the controller and set it on htmlTextPane.
14.4.	Add a showAbout() method to the view. It should show a dialog
box with information about the program. Think up the information on your own, but message type
must be JOptionPane.INFORMATION_MESSAGE.



HTML Editor (part 13)


Let's implement the TextEditMenuListener class in the listeners package. This class will work like
the UndoMenuListener class, but for other menu items. The menu items responsible for
style, font, color, etc. should only be available when the first tab is selected
in our editor.
13.1.	Add a boolean isHtmlTabSelected() method to the view. It must return
true if the tab that displays HTML is selected in the tabbed pane (hint: its index is 0).
13.2.	Add a View field to the TextEditMenuListener class. Initialize it in the class
constructor.
13.3.	In the TextEditMenuListener class, override the menuSelected(MenuEvent
menuEvent) method. It must:
13.3.1.	Use the parameter to get the object that the action was performed on. In
our case, this will be a JMenu object.
13.3.2.	Get a list of components (menu items) from this menu.
13.3.3.	For each menu item, call the setEnabled method, passing the return value of
the view's isHtmlTabSelected() method as an argument.
Run the application and be sure that the style, align, color and font menu items are available
only when the HTML tab is active, not when the Text tab is active.



HTML Editor (part 12)


12.1.	Implement the RedoAction class:
12.1.1.	Add a View field to the class. Add its initialization in the constructor.
12.1.2.	Implement the actionPerformed(ActionEvent actionEvent) method. It should call the
redo() method on the view.
12.2.	Implement the UndoAction class by analogy with RedoAction.
12.3.	Study the implementation of the StrikethroughAction class that you received along with the task, and
implement the following classes in the same way:
12.3.1.	SubscriptAction
12.3.2.	SuperscriptAction
Run the program and be sure that the Subscript, Superscript, and Strikethrough
menu items work. The menu items responsible for undo and redo aren't yet connected
to the controller and we can't check them.



