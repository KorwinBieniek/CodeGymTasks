taskKey="com.codegym.task.task32.task3209.big10"\n\nHTML Editor (part 10)


Our editor will support undo/redo of actions
performed in the editor.
Implement the UndoMenuListener class. This listener will listen to the menu, or more accurately,
it will listen for the moment when the edit menu is selected by the user. At that moment, it
will ask the view if we can currently undo or redo an
action. The answer determines whether we should make the "Undo" and "Redo" menu items
available.
10.1.	Add the following fields to the UndoMenuListener class:
10.1.1.	View view.
10.1.2.	JMenuItem undoMenuItem.
10.1.3.	JMenuItem redoMenuItem.
10.2.	Implement an UndoMenuListener(View view, JMenuItem undoMenuItem,
JMenuItem redoMenuItem) constructor. It should initialize the fields of the class.
10.3.	Implement a menuSelected(MenuEvent menuEvent) method. It will be called before
the menu is shown. It must:
10.3.1.	Ask the view whether we can undo an action using the
boolean canUndo() method. The view doesn't have such a method yet, so add a stub
that always returns false.
10.3.2.	Make the undoMenuItem available depending on what the view returns to us.
Hint: use the setEnabled() method.
10.3.3.	Take similar actions for redoMenuItem, adding a
canRedo() stub method to the view.
Run the program and make sure that the Undo and Redo menu items are not available.


Requirements:
1.	The UndoMenuListener class must have a View view field.
2.	The UndoMenuListener class must have a JMenuItem undoMenuItem field.
3.	The UndoMenuListener class must have a JMenuItem redoMenuItem field.
4.	Implement an UndoMenuListener(View view, JMenuItem undoMenuItem, JMenuItem redoMenuItem) constructor. It should correctly initialize the fields of the class.
5.	The View class must have a public boolean canUndo() method that returns false.
6.	The View class must have a public boolean canRedo() method that returns false.
7.	The menuSelected(MenuEvent menuEvent) method should make undoMenuItem and redoMenuItem available or unavailable.


HTML Editor (part 9)


9.1.	Implement the initMenuBar() method. It must:
9.1.1.	Create a new JMenuBar object. This will be our menu bar.
9.1.2.	Use MenuHelper to initialize the menu in the following order: File,
Edit, Style, Align, Color, Font, and Help.
9.1.3.	Add our menu bar to the top of the current frame's content pane,
similar to the way we did this with the tabbed pane.
9.2.	Add a View class constructor. It should give our application the same look and feel
that are defined in the system.
The constructor must not throw exceptions. It should just log them using
ExceptionHandler. Hint: To implement this task, use the UIManager class.

Run the application. Now you should see a menu bar at the top of the window. Some of
the menu items (for example: Cut, Copy, Paste, Style (partially), Align,
Color, Font) should already work. Be sure everything works and then continue
developing the program.



HTML Editor (part 8)


It's time to add all the necessary menu items and write classes for the actions
that are performed when the menu items are selected. This is quite time-consuming, routine work. You're a great
student and we wouldn't want to upset you. So, as a bonus, you're getting a ready-made
MenuHelper class! Here's what you need to do:
8.1.	In the actions package, write stubs for the following classes:
8.1.1.	UndoAction. It must inherit AbstractAction and
have an UndoAction(View view) constructor.
8.1.2.	RedoAction. The requirements are similar to those for
UndoAction.
8.1.3.	StrikethroughAction class, which is responsible for the strikethrough text style. Make it inherit
StyledEditorKit.StyledTextAction.
8.1.4.	SubscriptAction class, which is responsible for the subscript text style. It should
also inherit StyledEditorKit.StyledTextAction.
8.1.5.	SuperscriptAction. It will be responsible for the superscript style. Give it
the appropriate parent class.
8.2.	In the listeners package, write stubs for the following classes:
8.2.1.	UndoMenuListener. It should implement the MenuListener interface and have
an UndoMenuListener(View view, JMenuItem undoMenuItem, JMenuItem
redoMenuItem) constructor. You find out what it will be responsible for a little later.
8.2.2.	TextEditMenuListener. This class must also implement the MenuListener interface.
Add a TextEditMenuListener(View view) constructor to it. In subsequent tasks, we'll
take a more detailed look at it.



HTML Editor (part 7)


Add a MenuHelper class. This will be a helper class for initializing and configuring
the menu. The menu will have the following structure:
- File
-- New
-- Open
-- Save
-- Save as...
-- Exit

- Edit
-- Undo
-- Redo
-- Cut
-- Copy
-- Paste

- Style
-- Bold
-- Underline
-- Italic
-- Subscript
-- Superscript
-- Strikethrough

- Align
-- Left
-- Center
-- Right

- Color
-- Red
-- Orange
-- Yellow
-- Green
-- Blue
-- Cyan
-- Magenta
-- Black

- Font
-- Font
--- SansSerif, Serif, Monospaced, Dialog, DialogInput,
-- Font size
--- 6, 8, 10, 12, 14, 16, 20, 24, 32, 36, 48, 72

- Help
-- About

7.1.	In MenuHelper, implement a static JMenuItem addMenuItem(JMenu parent, String
text, ActionListener actionListener) method, where parent is the menu that we're adding the item to, text is
the text of the item being added, and actionListener is the action listener of the added
menu item. It must:
7.1.1.	Use the text parameter to create a new JMenuItem.
7.1.2.	Using the addActionListener() method to set an action listener on this item.
7.1.3.	Add the created menu item to parent.
7.1.4.	Return the created menu item.
7.2.	Implement a static JMenuItem addMenuItem(JMenu parent, Action action) method. This
method is similar to the previous one, but it has an action parameter,
which represents the action that must be performed when the menu item is selected. Hint: Pass action
to the constructor when creating a JMenuItem. Figure out where the name of the menu item will come from
if it isn't set separately.
7.3.	Implement a static JMenuItem addMenuItem(JMenu parent, String text, Action
action) method that adds a new menu item with the text and action arguments to parent
when this menu item is selected. In the implementation, call the method in the
previous step.
7.4.	Add stubs for the following static methods to MenuHelper:
7.4.1.	void initHelpMenu(View view, JMenuBar menuBar) - This method initializes the help menu.
7.4.2.	void initFontMenu(View view, JMenuBar menuBar) - This method initializes the
font menu.
7.4.3.	void initColorMenu(View view, JMenuBar menuBar) - This method initializes the color menu.
7.4.4.	void initAlignMenu(View view, JMenuBar menuBar) - This method initializes the
alignment menu.
7.4.5.	void initStyleMenu(View view, JMenuBar menuBar) - This method initializes the
style menu.
7.4.6.	void initEditMenu(View view, JMenuBar menuBar) - This method initializes the
edit menu.
7.4.7.	void initFileMenu(View view, JMenuBar menuBar) - This method initializes the file menu.



HTML Editor (part 6)


Implement the initEditor() method, which initializes the editor panes. It must:
6.1.	Set "text/html" as the content type for the htmlTextPane component.
Find and use the appropriate method.
6.2.	Create a new local JScrollPane component based on htmlTextPane.
6.3.	Add a tab named "HTML" and the component from the previous step
to tabbedPane.
6.4.	Create a new local JScrollPane component based on plainTextPane.
6.5.	Add another tab named "Text" and the component from the previous step
to tabbedPane.
6.6.	Set the preferred pane size on tabbedPane.
6.7.	Create a TabbedPaneChangeListener object and set it as
a change listener on tabbedPane.
6.8.	Add our tabbed pane to the center of the content pane of the current frame.
You can get the current frame's content pane using the getContentPane()
method, which is inherited from JFrame.
Think about which method you need to call and with which arguments for the tabbed pane to be displayed
in the center of the current frame's content pane.
After starting the application, you can see the latest results: two independent
tabs (HTML and Text), and each of them lets you enter your own text.



HTML Editor (part 5)


5.1.	In the listeners package, declare a TabbedPaneChangeListener class that implements the ChangeListener
interface. This class will listen for and handle changes to the state of the tabbed pane.
In this class, implement the following:
5.1.1.	A constructor that has a view parameter and saves
it in the view field.
5.1.2.	Override the method in the ChangeListener interface. It should call the
selectedTabChanged() method on the view. We don't have that last method yet. Make a
stub for it.
5.2.	Declare an ExceptionHandler class. This will be our exception handler,
which you can override in the future. For now, add a static log(Exception e)
method to it. This method will display a short description of the problem on the console
(use the toString method of the passed exception).



