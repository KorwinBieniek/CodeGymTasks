taskKey="com.codegym.task.task29.task2909.big05"\n\nRefactoring (part 5)


5.1.	Create a template method.
5.1.1.	Add a String getPosition() method to the Human class. It should return the string "Person".
5.1.2.	Override this method in the Student and Teacher classes. The method should return "Student" and "Teacher", respectively.
5.1.3.	Replace the printData() method in the subclasses with a template method that uses getPosition() in the base class.
5.2.	Replace delegation with inheritance. The Worker class must inherit Human, not contain it.
5.3.	Rename a method. Rename the setSlr() method to make it more clear what it is a setter for.


Requirements:
1.	The Human class must have a String getPosition() method that returns the string &quot;Person&quot;.
2.	In the Student class, override the String getPosition() method so it returns the string &quot;Student&quot;.
3.	In the Teacher class, override the String getPosition() method so it returns the string &quot;Teacher&quot;.
4.	You must replace the printData() method in the Student class with a printData() method in the Human class. Use getPosition().
5.	You must replace the printData() method in the Teacher class with a printData() method in the Human class. Use getPosition().
6.	The Worker class must inherit the Human class, not contain it.
7.	In the Worker class, you must rename the setSlr(double) method to setSalary(double).


Refactoring (part 4)


4.1.	Replace inheritance with delegation.
4.1.1.	The University class must not inherit Student.
4.1.2.	The University class must have a students list. Don't forget to initialize it.
4.1.3.	Add a setter and getter for students.
4.1.4.	A university has a name and an age. Add the required fields, along with setters and getters for them.
4.2.	Extract a superclass.
4.2.1.	Create a UniversityPerson class in the human package.
4.2.2.	Move the university field to it.
4.2.3.	Move the setter and getter for the university field.
4.2.4.	Make the required classes inherit UniversityPerson.
4.3.	Replace a simple field with an object. Change the university field's type to University.



Refactoring (part 3)


3.1.	Push down a field. Push down the course field to the appropriate class. Make it private.
3.2.	Push down a method. Push down the getter for the course field to the appropriate class.
3.3.	Extract an interface.
3.3.1.	Create an Alive interface in the human package.
3.3.2.	The interface must contain a live() method.
3.3.3.	Add an interface to the correct class.
3.4.	Collapse a hierarchy. Get rid of the Professor class.



Refactoring (part 2)


2.1.	Extract a subclass.
2.1.1.	Add the Soldier class to the human package.
2.1.2.	Get rid of the isSoldier field.
2.1.3.	Move the necessary methods from Human to Soldier.
2.1.4.	Update the Human constructor's signature.
2.2.	Pull up the body of the constructor.
2.2.1.	Move initialization of the name and age fields to the appropriate place. Add the necessary parameters to the Human constructor.
2.2.2.	Add a constructor to the Soldier class.



Refactoring (part 1)


It's time for a little refactoring. Wikipedia says, "Refactoring
or reorganizing code is the process of changing the internal structure of a program, without
affecting its external behavior and with an aim to making it easier to understand.
Refactoring is a sequence of small equivalent (i.e.
behavior preserving) transformations. Because each transformation is small,
the programmer can more easily track its correctness. At the same time, the whole
sequence can lead to a significant restructuring of the program and improve its
consistency and clarity." And we're going to do some of these small transformations.
After each change, check that the code still works.
A host of refactoring techniques have been repeatedly tried and proven by the community
of programmers. They been given their own names. Each task will be accompanied by the name
of a refactoring technique. You can also read more about it in Martin Fowler's book
"Refactoring: Improving the Design of Existing Code".
Let's begin. Carefully review the code in the human package.

Tasks:
1.1.	Pull up a field. Pull the children field up to the base class.
1.2.	Pull up a method. Pull the setter and getter for children up to the base class.
1.3.	Encapsulate a collection.
1.3.1.	The getChildren method should return an immutable representation of the children list.
1.3.2.	Remove the setter for children.
1.3.3.	Add addChild(Human) and removeChild(Human) methods. Implement their logic.



