taskKey="com.codegym.task.task29.task2909.big10"\n\nRefactoring (part 10)


Understand the code in the car package.
10.1.	Replace a constructor with a factory method.
10.1.1.	Declare Truck, Sedan, and Cabriolet classes that inherit Car.
10.1.2.	Add constructors that have an int numberOfPassengers constructors.
10.1.3.	Add a static Car create(int type, int numberOfPassengers) factory method to the Car class and implement it.
10.1.4.	Change the visibility of the Car class constructor.


Requirements:
1.	You need to create Truck, Sedan, and Cabriolet classes that inherit Car.
2.	You need to add constructors with int numberOfPassengers parameters to the created classes.
3.	You need to add a static Car create(int type, int numberOfPassengers) factory method to the Car class and implement it.
4.	You need to change the visibility of the Car class constructor from public to protected.


Refactoring (part 9)


9.1.	Self-encapsulate a field. Rewrite the incAverageGrade() method, using a setter and getter to access averageGrade.
9.2.	Replace an array field with an object. Replace the int[] size array with an instance of a new Size type,
containing the following public fields: int height and int weight. Declare a public Size class
inside the Human class.
9.3.	Encapsulate a field. Hide the company field in the Worker class. Add a corresponding setter and getter.
9.4.	Replace a type code with a class.
9.4.1.	Declare a public BloodType class inside the human package.
9.4.2.	Add the following to the BloodType class: a constant private int code field, a private constructor that
has an int parameter and initializes the code field, and a corresponding getter.
9.4.3.	Add static first(), second(), third() and fourth() methods to the BloodType class.
They should create and return BloodType objects with the correct code inside (1, 2, 3, and 4 respectively).
9.4.4.	Use the new BloodType class in the Human class.



Refactoring (part 8)


8.1.	Remove a setter. Remove the setId() method. The id field should be set only when
the object is created.
8.2.	Hide a method (field). Change the visibility of the nextId field to match
the area where it is used.
8.3.	Replace an exception with a check. Rewrite the removeStudent(int index) method so
that it removes the student from the students list only if the list contains the student. The method should not throw
an exception.
8.4.	Remove a flag. Rewrite the findJohnOrAlex() method without changing its
behavior. The method should not use flags like "found". Use a break
statement.



Refactoring (part 7)


7.1.	Parameterize a method. Replace the incAverageGradeBy01() and incAverageGradeBy02() methods
with an incAverageGrade(double delta) method.
7.2.	Pass an entire object. Rewrite the addStudentInfo() method so that it
takes a Student object as an argument.
7.3.	Replace a parameter with a method call. Rewrite the printStudentInfo() method so that it does not
take a student name as an argument, but rather gets it by calling the appropriate
method on a passed object.
7.4.	Replace parameters with an object. Rewrite the setBeginningOfSession() and setEndOfSession() methods
so that they take one date object instead of several arguments.



Refactoring (part 6)


6.1.	Replace a parameter with a set of specialized methods. Replace the Student class's setValue() method
with specialized setCourse() and setAverageGrade() methods.
6.2.	Add a parameter. Add a double parameter to the
getStudentWithAverageGrade() method so the average grade of the required student is clear.
Implement the getStudentWithAverageGrade() method.
6.3.	Remove a parameter. Remove the parameter from the getStudentWithHighestAverageGrade() method.
Implement this method. It should return the student with the highest average grade.
6.4.	Separate a query from a modification. Split the
getStudentWithLowestAverageGradeAndExpel() method into Student getStudentWithLowestAverageGrade() and
void expel(Student student). The first method should return the student with
the lowest average score, and the second method should expel the passed student (remove it from
the students list).



Refactoring (part 5)


5.1.	Create a template method.
5.1.1.	Add a String getPosition() method to the Human class. It should return the string "Person".
5.1.2.	Override this method in the Student and Teacher classes. The method should return "Student" and "Teacher", respectively.
5.1.3.	Replace the printData() method in the subclasses with a template method that uses getPosition() in the base class.
5.2.	Replace delegation with inheritance. The Worker class must inherit Human, not contain it.
5.3.	Rename a method. Rename the setSlr() method to make it more clear what it is a setter for.



