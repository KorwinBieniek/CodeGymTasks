taskKey="com.codegym.task.task29.task2909.big02"\n\nRefactoring (part 2)


2.1.	Extract a subclass.
2.1.1.	Add the Soldier class to the human package.
2.1.2.	Get rid of the isSoldier field.
2.1.3.	Move the necessary methods from Human to Soldier.
2.1.4.	Update the Human constructor's signature.
2.2.	Pull up the body of the constructor.
2.2.1.	Move initialization of the name and age fields to the appropriate place. Add the necessary parameters to the Human constructor.
2.2.2.	Add a constructor to the Soldier class.


Requirements:
1.	The Soldier class must be in the human package in a separate file. The Soldier class must inherit the Human class.
2.	The Human class should not have an isSoldier field.
3.	You need to move the necessary methods from the Human class to the Soldier class.
4.	The Human class constructor should have two parameters (String name and int age) and initialize the corresponding fields.
5.	The Soldier class must have a constructor that has two parameters (String name and int age) and calls the appropriate constructor of the superclass.


Refactoring (part 1)


It's time for a little refactoring. Wikipedia says, "Refactoring
or reorganizing code is the process of changing the internal structure of a program, without
affecting its external behavior and with an aim to making it easier to understand.
Refactoring is a sequence of small equivalent (i.e.
behavior preserving) transformations. Because each transformation is small,
the programmer can more easily track its correctness. At the same time, the whole
sequence can lead to a significant restructuring of the program and improve its
consistency and clarity." And we're going to do some of these small transformations.
After each change, check that the code still works.
A host of refactoring techniques have been repeatedly tried and proven by the community
of programmers. They been given their own names. Each task will be accompanied by the name
of a refactoring technique. You can also read more about it in Martin Fowler's book
"Refactoring: Improving the Design of Existing Code".
Let's begin. Carefully review the code in the human package.

Tasks:
1.1.	Pull up a field. Pull the children field up to the base class.
1.2.	Pull up a method. Pull the setter and getter for children up to the base class.
1.3.	Encapsulate a collection.
1.3.1.	The getChildren method should return an immutable representation of the children list.
1.3.2.	Remove the setter for children.
1.3.3.	Add addChild(Human) and removeChild(Human) methods. Implement their logic.



