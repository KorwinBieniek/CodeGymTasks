taskKey="com.codegym.task.task29.task2909.big12"\n\nRefactoring (part 12)


12.1.	Combine conditional expressions.
12.1.1.	In the Car class, add a private method that indicates whether passengers can be carried:
boolean canPassengersBeCarried(). The method should return true if
the driver is available (isDriverAvailable) and there is fuel.
12.1.2.	Rewrite the getNumberOfPassengersThatCanBeCarried() method by combining the conditional
expressions (use the canPassengersBeCarried() method).
12.2.	Combine duplicate conditional fragments. Rewrite the
startMoving() method so that it does not have duplicate function calls.
12.3.	Replace a magic number with a symbolic constant. Replace the magic numbers in the
getMaxSpeed() method with constants: MAX_TRUCK_SPEED,
MAX_SEDAN_SPEED, and MAX_CABRIOLET_SPEED.
12.4.	Replace a conditional expression with polymorphism.
12.4.1.	Override the getMaxSpeed​​() method in subclasses, and get rid of the conditional expression.
12.4.2.	The Car class's getMaxSpeed() method is abstract.


Requirements:
1.	You need to create and implement a private boolean canPassengersBeCarried() method in the Car class.
2.	You need to change the getNumberOfPassengersThatCanBeCarried() method by combining conditional statements (use the canPassengersBeCarried() method).
3.	You need to change the startMoving() method so that it does not have duplicate calls to the fastenDriverBelt() method.
4.	You need to override the getMaxSpeed() method in the Truck class. The method should use the MAX_TRUCK_SPEED constant, whose value is 80.
5.	You need to override the getMaxSpeed() method in the Sedan class. The method should use the MAX_SEDAN_SPEED constant, whose value is 120.
6.	You need to override the getMaxSpeed() method in the Cabriolet class. The method should use the MAX_CABRIOLET_SPEED constant, whose value is 90.
7.	You need to make the Car class&#39;s getMaxSpeed() method abstract.


Refactoring (part 11)


11.1.	Replace an error code with an exception. Rewrite the fill(double numberOfGallons)
method to throw an Exception if there is an error.
11.2.	Decompose a conditional expression.
11.2.1.	Add and implement a method in the Car class that determines whether the passed date belongs to
summer: boolean isSummer(Date date , Date summerStart, Date summerEnd).
11.2.2.	Add and implement a method that calculates fuel consumption in winter: double
getWinterConsumption(int length).
11.2.3.	Add and implement a method that calculates fuel consumption in summer: double
getSummerConsumption(int length).
11.2.4.	Rewrite the getTripConsumption() method using the new methods.



Refactoring (part 10)


Understand the code in the car package.
10.1.	Replace a constructor with a factory method.
10.1.1.	Declare Truck, Sedan, and Cabriolet classes that inherit Car.
10.1.2.	Add constructors that have an int numberOfPassengers constructors.
10.1.3.	Add a static Car create(int type, int numberOfPassengers) factory method to the Car class and implement it.
10.1.4.	Change the visibility of the Car class constructor.



Refactoring (part 9)


9.1.	Self-encapsulate a field. Rewrite the incAverageGrade() method, using a setter and getter to access averageGrade.
9.2.	Replace an array field with an object. Replace the int[] size array with an instance of a new Size type,
containing the following public fields: int height and int weight. Declare a public Size class
inside the Human class.
9.3.	Encapsulate a field. Hide the company field in the Worker class. Add a corresponding setter and getter.
9.4.	Replace a type code with a class.
9.4.1.	Declare a public BloodType class inside the human package.
9.4.2.	Add the following to the BloodType class: a constant private int code field, a private constructor that
has an int parameter and initializes the code field, and a corresponding getter.
9.4.3.	Add static first(), second(), third() and fourth() methods to the BloodType class.
They should create and return BloodType objects with the correct code inside (1, 2, 3, and 4 respectively).
9.4.4.	Use the new BloodType class in the Human class.



Refactoring (part 8)


8.1.	Remove a setter. Remove the setId() method. The id field should be set only when
the object is created.
8.2.	Hide a method (field). Change the visibility of the nextId field to match
the area where it is used.
8.3.	Replace an exception with a check. Rewrite the removeStudent(int index) method so
that it removes the student from the students list only if the list contains the student. The method should not throw
an exception.
8.4.	Remove a flag. Rewrite the findJohnOrAlex() method without changing its
behavior. The method should not use flags like "found". Use a break
statement.



Refactoring (part 7)


7.1.	Parameterize a method. Replace the incAverageGradeBy01() and incAverageGradeBy02() methods
with an incAverageGrade(double delta) method.
7.2.	Pass an entire object. Rewrite the addStudentInfo() method so that it
takes a Student object as an argument.
7.3.	Replace a parameter with a method call. Rewrite the printStudentInfo() method so that it does not
take a student name as an argument, but rather gets it by calling the appropriate
method on a passed object.
7.4.	Replace parameters with an object. Rewrite the setBeginningOfSession() and setEndOfSession() methods
so that they take one date object instead of several arguments.



