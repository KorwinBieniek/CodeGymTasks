taskKey="com.codegym.task.task29.task2909.big07"\n\nRefactoring (part 7)


7.1.	Parameterize a method. Replace the incAverageGradeBy01() and incAverageGradeBy02() methods
with an incAverageGrade(double delta) method.
7.2.	Pass an entire object. Rewrite the addStudentInfo() method so that it
takes a Student object as an argument.
7.3.	Replace a parameter with a method call. Rewrite the printStudentInfo() method so that it does not
take a student name as an argument, but rather gets it by calling the appropriate
method on a passed object.
7.4.	Replace parameters with an object. Rewrite the setBeginningOfSession() and setEndOfSession() methods
so that they take one date object instead of several arguments.


Requirements:
1.	You need to replace the Student class&#39;s incAverageGradeBy01() and incAverageGradeBy02() methods with one incAverageGrade(double delta) method.
2.	You need to change the StudentDatabase class&#39;s addStudentInfo(String, int, double) method so that it takes a Student object as an argument.
3.	You need to change the StudentDatabase class&#39;s printStudentInfo(String, Student) method so that it does not take a student name as an argument.
4.	You need to change the Student class&#39;s setBeginningOfSession(int, int, int) method so that it has one Date parameter.
5.	You need to change the Student class&#39;s setEndOfSession(int, int, int) method so that it has one Date parameter.


Refactoring (part 6)


6.1.	Replace a parameter with a set of specialized methods. Replace the Student class's setValue() method
with specialized setCourse() and setAverageGrade() methods.
6.2.	Add a parameter. Add a double parameter to the
getStudentWithAverageGrade() method so the average grade of the required student is clear.
Implement the getStudentWithAverageGrade() method.
6.3.	Remove a parameter. Remove the parameter from the getStudentWithHighestAverageGrade() method.
Implement this method. It should return the student with the highest average grade.
6.4.	Separate a query from a modification. Split the
getStudentWithLowestAverageGradeAndExpel() method into Student getStudentWithLowestAverageGrade() and
void expel(Student student). The first method should return the student with
the lowest average score, and the second method should expel the passed student (remove it from
the students list).



Refactoring (part 5)


5.1.	Create a template method.
5.1.1.	Add a String getPosition() method to the Human class. It should return the string "Person".
5.1.2.	Override this method in the Student and Teacher classes. The method should return "Student" and "Teacher", respectively.
5.1.3.	Replace the printData() method in the subclasses with a template method that uses getPosition() in the base class.
5.2.	Replace delegation with inheritance. The Worker class must inherit Human, not contain it.
5.3.	Rename a method. Rename the setSlr() method to make it more clear what it is a setter for.



Refactoring (part 4)


4.1.	Replace inheritance with delegation.
4.1.1.	The University class must not inherit Student.
4.1.2.	The University class must have a students list. Don't forget to initialize it.
4.1.3.	Add a setter and getter for students.
4.1.4.	A university has a name and an age. Add the required fields, along with setters and getters for them.
4.2.	Extract a superclass.
4.2.1.	Create a UniversityPerson class in the human package.
4.2.2.	Move the university field to it.
4.2.3.	Move the setter and getter for the university field.
4.2.4.	Make the required classes inherit UniversityPerson.
4.3.	Replace a simple field with an object. Change the university field's type to University.



Refactoring (part 3)


3.1.	Push down a field. Push down the course field to the appropriate class. Make it private.
3.2.	Push down a method. Push down the getter for the course field to the appropriate class.
3.3.	Extract an interface.
3.3.1.	Create an Alive interface in the human package.
3.3.2.	The interface must contain a live() method.
3.3.3.	Add an interface to the correct class.
3.4.	Collapse a hierarchy. Get rid of the Professor class.



Refactoring (part 2)


2.1.	Extract a subclass.
2.1.1.	Add the Soldier class to the human package.
2.1.2.	Get rid of the isSoldier field.
2.1.3.	Move the necessary methods from Human to Soldier.
2.1.4.	Update the Human constructor's signature.
2.2.	Pull up the body of the constructor.
2.2.1.	Move initialization of the name and age fields to the appropriate place. Add the necessary parameters to the Human constructor.
2.2.2.	Add a constructor to the Soldier class.



