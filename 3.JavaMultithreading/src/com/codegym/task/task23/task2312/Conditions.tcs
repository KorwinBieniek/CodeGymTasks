taskKey="com.codegym.task.task23.task2312.big08"\n\nSnake (part 8)


It's the Snake class constructor's turn.

Initially, the snake consists of one piece: the head.
And what does it require?
What needs to be passed to the constructor?
The coordinates of the snake, of course.

Here's what we need:
a) Pass the coordinates of the snake's head (x and y) to the constructor.
b) create the first "piece of the snake" (the head) in the constructor and add it to the sections collection (ArrayList).
c) set isAlive to true.
d) don't forget to initialize the sections variable in the constructor. You can't add much to a null object!
e) create and implement the int getX() method. The method should return the x-coordinate of the snake's head.
e) create and implement the int getY() method. The method should return the y-coordinate of the snake's head.
g) also add a move() method to the classâ€”it will come in handy later.
h) the constructor must be public.


Requirements:
1.	A correctly functioning (according to the task conditions) public constructor with two int parameters must be created in the Snake class.
2.	A no-parameter getX() method that returns the x-coordinate of the zeroth element of the sections list must be created in the Snake class.
3.	A no-parameter getY() method that returns the y-coordinate of the zeroth element of the sections list must be created in the Snake class.
4.	The move method must be created in the Snake class.


Snake (part 7)


We've described the "pieces of the snake". Now we'll deal with the snake itself.

The snake must have a list of SnakeSections and a head.
Let the head just be the very first piece (index 0).

The snake also has a direction in which it moves by default.
And there is also a condition: whether the snake is alive or dead.
The game ends when the snake is dead.

Here's what we need:
a) Add a List<SnakeSection> sections field to the Snake class.
b) Add a boolean isAlive field.
c) Add a SnakeDirection direction field.
d) Add getters for all the fields, and a setter for direction.

Note:
For boolean fields, the getter is usually named isValue(), not getValue(), to improve the readability of the code.
But don't call it isIsAlive(). One "is" will be enough.
Note 2:
All fields created in this task should be private, while all of the methods should be public.



Snake (part 6)


Now let's tackle the SnakeSection class.
It will describe one piece of the snake.

And what does each piece have?
Right! Coordinates.

Add two fields to the SnakeSection class: int x and int y.
Add getters for these fields and a constructor with two int parameters.



Snake (part 5)


Now finish the SnakeDirection enum so that it contains the possible directions of the snake's movement.

Add 4 values: UP, DOWN, LEFT, RIGHT.

It should look something like this:
public enum SnakeDirection
{
UP,
RIGHT,
DOWN,
LEFT
}



Snake (part 4)


You've already declared coordinates x and y in the Mouse class, but how do you access them?
Create proper getters for these fields and a constructor with two int parameters (x and y).



Snake (part 3)


Great. I also added the KeyboardObserver class, which we'll use later.
Study it carefully. It will come in handy.

Let's start with the simplest thing: the Mouse class.
The mouse won't move. It will have only coordinates and nothing else.
Add two private fields to the Mouse class: int x and int y.



