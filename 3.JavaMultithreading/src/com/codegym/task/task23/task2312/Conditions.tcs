taskKey="com.codegym.task.task23.task2312.big07"\n\nSnake (part 7)


We've described the "pieces of the snake". Now we'll deal with the snake itself.

The snake must have a list of SnakeSections and a head.
Let the head just be the very first piece (index 0).

The snake also has a direction in which it moves by default.
And there is also a condition: whether the snake is alive or dead.
The game ends when the snake is dead.

Here's what we need:
a) Add a List<SnakeSection> sections field to the Snake class.
b) Add a boolean isAlive field.
c) Add a SnakeDirection direction field.
d) Add getters for all the fields, and a setter for direction.

Note:
For boolean fields, the getter is usually named isValue(), not getValue(), to improve the readability of the code.
But don't call it isIsAlive(). One "is" will be enough.
Note 2:
All fields created in this task should be private, while all of the methods should be public.


Requirements:
1.	A List&lt;SnakeSection&gt; sections field should be declared in the Snake class.
2.	The Snake class must define a boolean isAlive field.
3.	The Snake class must define a SnakeDirection direction field.
4.	A proper getter for the sections field must be created in the Snake class.
5.	A proper getter for the isAlive field must be created in the Snake class.
6.	A proper getter for the direction field must be created in the Snake class.
7.	A proper setter for the direction field must be created in the Snake class.
8.	All fields in the Snake class must be declared with a private access modifier.
9.	All methods in the Snake class must be declared with a public access modifier.


Snake (part 6)


Now let's tackle the SnakeSection class.
It will describe one piece of the snake.

And what does each piece have?
Right! Coordinates.

Add two fields to the SnakeSection class: int x and int y.
Add getters for these fields and a constructor with two int parameters.



Snake (part 5)


Now finish the SnakeDirection enum so that it contains the possible directions of the snake's movement.

Add 4 values: UP, DOWN, LEFT, RIGHT.

It should look something like this:
public enum SnakeDirection
{
UP,
RIGHT,
DOWN,
LEFT
}



Snake (part 4)


You've already declared coordinates x and y in the Mouse class, but how do you access them?
Create proper getters for these fields and a constructor with two int parameters (x and y).



Snake (part 3)


Great. I also added the KeyboardObserver class, which we'll use later.
Study it carefully. It will come in handy.

Let's start with the simplest thing: the Mouse class.
The mouse won't move. It will have only coordinates and nothing else.
Add two private fields to the Mouse class: int x and int y.



Snake (part 2)


Now the most interesting thing is how the snake will be constructed.
Here's what we can say about the snake:
a) In fact, the snake is a set of sections or pieces. But we do know that one of them is the head.
b) The snake has a direction of movement.

This means we also need the following classes:
SnakeSection, which represents a piece of the snake.
SnakeDirection, which is an enum describing the snake's direction of movement.

Create the SnakeSection and SnakeDirection classes.



