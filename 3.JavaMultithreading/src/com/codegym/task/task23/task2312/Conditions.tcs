taskKey="com.codegym.task.task23.task2312.big09"\n\nSnake (part 9)


The most important class remains: Room.
What do we need to describe it?
One, the dimensions of the room (width and height).
Two, a Snake
Three, a Mouse.

Here's what we need:
a) create int width and height variables in the Room class.
b) create a Snake snake variables in the Room class.
c) create a Snake mouse variable in the Room class. Just kidding. I mean a Mouse, of course :).
d) create getters and setters for all of them.
e) create a constructor. The constructor must have three parameters: width, height, and... snake!


Requirements:
1.	A private int width variable must be created in the Room class.
2.	A private int height variable must be created in the Room class.
3.	A private Snake snake variable must be created in the Room class.
4.	A private Mouse mouse variable must be created in the Room class.
5.	A proper public getter for the width field must be created in the Room class.
6.	A proper public getter for the height field must be created in the Room class.
7.	A proper public getter for the snake field must be created in the Room class.
8.	A proper public getter for the mouse field must be created in the Room class.
9.	A proper public setter for the width field must be created in the Room class.
10.	A proper public setter for the height field must be created in the Room class.
11.	A proper public setter for the snake field must be created in the Room class.
12.	A proper public setter for the mouse field must be created in the Room class.
13.	A proper public constructor with (int width, int height, Snake snake) parameters must be created in the Room class.


Snake (part 8)


It's the Snake class constructor's turn.

Initially, the snake consists of one piece: the head.
And what does it require?
What needs to be passed to the constructor?
The coordinates of the snake, of course.

Here's what we need:
a) Pass the coordinates of the snake's head (x and y) to the constructor.
b) create the first "piece of the snake" (the head) in the constructor and add it to the sections collection (ArrayList).
c) set isAlive to true.
d) don't forget to initialize the sections variable in the constructor. You can't add much to a null object!
e) create and implement the int getX() method. The method should return the x-coordinate of the snake's head.
e) create and implement the int getY() method. The method should return the y-coordinate of the snake's head.
g) also add a move() method to the classâ€”it will come in handy later.
h) the constructor must be public.



Snake (part 7)


We've described the "pieces of the snake". Now we'll deal with the snake itself.

The snake must have a list of SnakeSections and a head.
Let the head just be the very first piece (index 0).

The snake also has a direction in which it moves by default.
And there is also a condition: whether the snake is alive or dead.
The game ends when the snake is dead.

Here's what we need:
a) Add a List<SnakeSection> sections field to the Snake class.
b) Add a boolean isAlive field.
c) Add a SnakeDirection direction field.
d) Add getters for all the fields, and a setter for direction.

Note:
For boolean fields, the getter is usually named isValue(), not getValue(), to improve the readability of the code.
But don't call it isIsAlive(). One "is" will be enough.
Note 2:
All fields created in this task should be private, while all of the methods should be public.



Snake (part 6)


Now let's tackle the SnakeSection class.
It will describe one piece of the snake.

And what does each piece have?
Right! Coordinates.

Add two fields to the SnakeSection class: int x and int y.
Add getters for these fields and a constructor with two int parameters.



Snake (part 5)


Now finish the SnakeDirection enum so that it contains the possible directions of the snake's movement.

Add 4 values: UP, DOWN, LEFT, RIGHT.

It should look something like this:
public enum SnakeDirection
{
UP,
RIGHT,
DOWN,
LEFT
}



Snake (part 4)


You've already declared coordinates x and y in the Mouse class, but how do you access them?
Create proper getters for these fields and a constructor with two int parameters (x and y).



